
Lab 2V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001860  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001a1c  08001a1c  00011a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a5c  08001a5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a5c  08001a5c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a5c  08001a5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a5c  08001a5c  00011a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a60  08001a60  00011a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001a70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001a70  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000487c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000108f  00000000  00000000  000248fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005b0  00000000  00000000  00025990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000425  00000000  00000000  00025f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027f42  00000000  00000000  00026365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005ee4  00000000  00000000  0004e2a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4931  00000000  00000000  0005418b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000014f8  00000000  00000000  00148abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00149fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08001a04 	.word	0x08001a04

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08001a04 	.word	0x08001a04

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000202:	f000 f952 	bl	80004aa <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f81f 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f86f 	bl	80002ec <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  GPIO_PinState pinState = HAL_GPIO_ReadPin(PB_BLUE_GPIO_Port, PB_BLUE_Pin);
 800020e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000212:	480b      	ldr	r0, [pc, #44]	; (8000240 <main+0x44>)
 8000214:	f000 fc36 	bl	8000a84 <HAL_GPIO_ReadPin>
 8000218:	4603      	mov	r3, r0
 800021a:	71fb      	strb	r3, [r7, #7]
	  if (pinState == GPIO_PIN_RESET) {
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d106      	bne.n	8000230 <main+0x34>
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000222:	2201      	movs	r2, #1
 8000224:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000228:	4806      	ldr	r0, [pc, #24]	; (8000244 <main+0x48>)
 800022a:	f000 fc43 	bl	8000ab4 <HAL_GPIO_WritePin>
 800022e:	e7ee      	b.n	800020e <main+0x12>
	  } else {
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000236:	4803      	ldr	r0, [pc, #12]	; (8000244 <main+0x48>)
 8000238:	f000 fc3c 	bl	8000ab4 <HAL_GPIO_WritePin>
  {
 800023c:	e7e7      	b.n	800020e <main+0x12>
 800023e:	bf00      	nop
 8000240:	48000800 	.word	0x48000800
 8000244:	48000400 	.word	0x48000400

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b096      	sub	sp, #88	; 0x58
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0314 	add.w	r3, r7, #20
 8000252:	2244      	movs	r2, #68	; 0x44
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f001 fba8 	bl	80019ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	463b      	mov	r3, r7
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800026a:	2000      	movs	r0, #0
 800026c:	f000 fc5a 	bl	8000b24 <HAL_PWREx_ControlVoltageScaling>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000276:	f000 f889 	bl	800038c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800027a:	2310      	movs	r3, #16
 800027c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800027e:	2301      	movs	r3, #1
 8000280:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000282:	2300      	movs	r3, #0
 8000284:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000286:	2360      	movs	r3, #96	; 0x60
 8000288:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028a:	2302      	movs	r3, #2
 800028c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800028e:	2301      	movs	r3, #1
 8000290:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000292:	2301      	movs	r3, #1
 8000294:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000296:	233c      	movs	r3, #60	; 0x3c
 8000298:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800029a:	2302      	movs	r3, #2
 800029c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800029e:	2302      	movs	r3, #2
 80002a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002a2:	2302      	movs	r3, #2
 80002a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a6:	f107 0314 	add.w	r3, r7, #20
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 fcde 	bl	8000c6c <HAL_RCC_OscConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002b6:	f000 f869 	bl	800038c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ba:	230f      	movs	r3, #15
 80002bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002be:	2303      	movs	r3, #3
 80002c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80002ce:	463b      	mov	r3, r7
 80002d0:	2105      	movs	r1, #5
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 f8e4 	bl	80014a0 <HAL_RCC_ClockConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002de:	f000 f855 	bl	800038c <Error_Handler>
  }
}
 80002e2:	bf00      	nop
 80002e4:	3758      	adds	r7, #88	; 0x58
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 030c 	add.w	r3, r7, #12
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
 8000300:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000302:	4b1f      	ldr	r3, [pc, #124]	; (8000380 <MX_GPIO_Init+0x94>)
 8000304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000306:	4a1e      	ldr	r2, [pc, #120]	; (8000380 <MX_GPIO_Init+0x94>)
 8000308:	f043 0304 	orr.w	r3, r3, #4
 800030c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800030e:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <MX_GPIO_Init+0x94>)
 8000310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000312:	f003 0304 	and.w	r3, r3, #4
 8000316:	60bb      	str	r3, [r7, #8]
 8000318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031a:	4b19      	ldr	r3, [pc, #100]	; (8000380 <MX_GPIO_Init+0x94>)
 800031c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031e:	4a18      	ldr	r2, [pc, #96]	; (8000380 <MX_GPIO_Init+0x94>)
 8000320:	f043 0302 	orr.w	r3, r3, #2
 8000324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000326:	4b16      	ldr	r3, [pc, #88]	; (8000380 <MX_GPIO_Init+0x94>)
 8000328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032a:	f003 0302 	and.w	r3, r3, #2
 800032e:	607b      	str	r3, [r7, #4]
 8000330:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000338:	4812      	ldr	r0, [pc, #72]	; (8000384 <MX_GPIO_Init+0x98>)
 800033a:	f000 fbbb 	bl	8000ab4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB_BLUE_Pin */
  GPIO_InitStruct.Pin = PB_BLUE_Pin;
 800033e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000342:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000344:	2300      	movs	r3, #0
 8000346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000348:	2300      	movs	r3, #0
 800034a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PB_BLUE_GPIO_Port, &GPIO_InitStruct);
 800034c:	f107 030c 	add.w	r3, r7, #12
 8000350:	4619      	mov	r1, r3
 8000352:	480d      	ldr	r0, [pc, #52]	; (8000388 <MX_GPIO_Init+0x9c>)
 8000354:	f000 fa04 	bl	8000760 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000358:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800035c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035e:	2301      	movs	r3, #1
 8000360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000366:	2300      	movs	r3, #0
 8000368:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800036a:	f107 030c 	add.w	r3, r7, #12
 800036e:	4619      	mov	r1, r3
 8000370:	4804      	ldr	r0, [pc, #16]	; (8000384 <MX_GPIO_Init+0x98>)
 8000372:	f000 f9f5 	bl	8000760 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000376:	bf00      	nop
 8000378:	3720      	adds	r7, #32
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40021000 	.word	0x40021000
 8000384:	48000400 	.word	0x48000400
 8000388:	48000800 	.word	0x48000800

0800038c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000390:	b672      	cpsid	i
}
 8000392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000394:	e7fe      	b.n	8000394 <Error_Handler+0x8>
	...

08000398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800039e:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <HAL_MspInit+0x44>)
 80003a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003a2:	4a0e      	ldr	r2, [pc, #56]	; (80003dc <HAL_MspInit+0x44>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	6613      	str	r3, [r2, #96]	; 0x60
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <HAL_MspInit+0x44>)
 80003ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003b6:	4b09      	ldr	r3, [pc, #36]	; (80003dc <HAL_MspInit+0x44>)
 80003b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003ba:	4a08      	ldr	r2, [pc, #32]	; (80003dc <HAL_MspInit+0x44>)
 80003bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c0:	6593      	str	r3, [r2, #88]	; 0x58
 80003c2:	4b06      	ldr	r3, [pc, #24]	; (80003dc <HAL_MspInit+0x44>)
 80003c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003ca:	603b      	str	r3, [r7, #0]
 80003cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ce:	bf00      	nop
 80003d0:	370c      	adds	r7, #12
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40021000 	.word	0x40021000

080003e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003e4:	e7fe      	b.n	80003e4 <NMI_Handler+0x4>

080003e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ea:	e7fe      	b.n	80003ea <HardFault_Handler+0x4>

080003ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <MemManage_Handler+0x4>

080003f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003f6:	e7fe      	b.n	80003f6 <BusFault_Handler+0x4>

080003f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003fc:	e7fe      	b.n	80003fc <UsageFault_Handler+0x4>

080003fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr

0800040c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr

0800041a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800041a:	b480      	push	{r7}
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800041e:	bf00      	nop
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800042c:	f000 f892 	bl	8000554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}

08000434 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <SystemInit+0x20>)
 800043a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800043e:	4a05      	ldr	r2, [pc, #20]	; (8000454 <SystemInit+0x20>)
 8000440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	e000ed00 	.word	0xe000ed00

08000458 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000490 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800045c:	f7ff ffea 	bl	8000434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000460:	480c      	ldr	r0, [pc, #48]	; (8000494 <LoopForever+0x6>)
  ldr r1, =_edata
 8000462:	490d      	ldr	r1, [pc, #52]	; (8000498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000464:	4a0d      	ldr	r2, [pc, #52]	; (800049c <LoopForever+0xe>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000468:	e002      	b.n	8000470 <LoopCopyDataInit>

0800046a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800046c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800046e:	3304      	adds	r3, #4

08000470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000474:	d3f9      	bcc.n	800046a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000476:	4a0a      	ldr	r2, [pc, #40]	; (80004a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000478:	4c0a      	ldr	r4, [pc, #40]	; (80004a4 <LoopForever+0x16>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800047c:	e001      	b.n	8000482 <LoopFillZerobss>

0800047e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800047e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000480:	3204      	adds	r2, #4

08000482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000484:	d3fb      	bcc.n	800047e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000486:	f001 fa99 	bl	80019bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800048a:	f7ff feb7 	bl	80001fc <main>

0800048e <LoopForever>:

LoopForever:
    b LoopForever
 800048e:	e7fe      	b.n	800048e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000490:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000498:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800049c:	08001a64 	.word	0x08001a64
  ldr r2, =_sbss
 80004a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004a4:	2000002c 	.word	0x2000002c

080004a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004a8:	e7fe      	b.n	80004a8 <ADC1_IRQHandler>

080004aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b082      	sub	sp, #8
 80004ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004b0:	2300      	movs	r3, #0
 80004b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004b4:	2003      	movs	r0, #3
 80004b6:	f000 f91f 	bl	80006f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004ba:	200f      	movs	r0, #15
 80004bc:	f000 f80e 	bl	80004dc <HAL_InitTick>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d002      	beq.n	80004cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004c6:	2301      	movs	r3, #1
 80004c8:	71fb      	strb	r3, [r7, #7]
 80004ca:	e001      	b.n	80004d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004cc:	f7ff ff64 	bl	8000398 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004d0:	79fb      	ldrb	r3, [r7, #7]
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80004e4:	2300      	movs	r3, #0
 80004e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80004e8:	4b17      	ldr	r3, [pc, #92]	; (8000548 <HAL_InitTick+0x6c>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d023      	beq.n	8000538 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80004f0:	4b16      	ldr	r3, [pc, #88]	; (800054c <HAL_InitTick+0x70>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <HAL_InitTick+0x6c>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	4619      	mov	r1, r3
 80004fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000502:	fbb2 f3f3 	udiv	r3, r2, r3
 8000506:	4618      	mov	r0, r3
 8000508:	f000 f91d 	bl	8000746 <HAL_SYSTICK_Config>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d10f      	bne.n	8000532 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2b0f      	cmp	r3, #15
 8000516:	d809      	bhi.n	800052c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000518:	2200      	movs	r2, #0
 800051a:	6879      	ldr	r1, [r7, #4]
 800051c:	f04f 30ff 	mov.w	r0, #4294967295
 8000520:	f000 f8f5 	bl	800070e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000524:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <HAL_InitTick+0x74>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6013      	str	r3, [r2, #0]
 800052a:	e007      	b.n	800053c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800052c:	2301      	movs	r3, #1
 800052e:	73fb      	strb	r3, [r7, #15]
 8000530:	e004      	b.n	800053c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000532:	2301      	movs	r3, #1
 8000534:	73fb      	strb	r3, [r7, #15]
 8000536:	e001      	b.n	800053c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000538:	2301      	movs	r3, #1
 800053a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800053c:	7bfb      	ldrb	r3, [r7, #15]
}
 800053e:	4618      	mov	r0, r3
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000008 	.word	0x20000008
 800054c:	20000000 	.word	0x20000000
 8000550:	20000004 	.word	0x20000004

08000554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <HAL_IncTick+0x20>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	461a      	mov	r2, r3
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <HAL_IncTick+0x24>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4413      	add	r3, r2
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <HAL_IncTick+0x24>)
 8000566:	6013      	str	r3, [r2, #0]
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000008 	.word	0x20000008
 8000578:	20000028 	.word	0x20000028

0800057c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return uwTick;
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <HAL_GetTick+0x14>)
 8000582:	681b      	ldr	r3, [r3, #0]
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000028 	.word	0x20000028

08000594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f003 0307 	and.w	r3, r3, #7
 80005a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <__NVIC_SetPriorityGrouping+0x44>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005aa:	68ba      	ldr	r2, [r7, #8]
 80005ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005b0:	4013      	ands	r3, r2
 80005b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005c6:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <__NVIC_SetPriorityGrouping+0x44>)
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	60d3      	str	r3, [r2, #12]
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e0:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <__NVIC_GetPriorityGrouping+0x18>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	0a1b      	lsrs	r3, r3, #8
 80005e6:	f003 0307 	and.w	r3, r3, #7
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	6039      	str	r1, [r7, #0]
 8000602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000608:	2b00      	cmp	r3, #0
 800060a:	db0a      	blt.n	8000622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	b2da      	uxtb	r2, r3
 8000610:	490c      	ldr	r1, [pc, #48]	; (8000644 <__NVIC_SetPriority+0x4c>)
 8000612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000616:	0112      	lsls	r2, r2, #4
 8000618:	b2d2      	uxtb	r2, r2
 800061a:	440b      	add	r3, r1
 800061c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000620:	e00a      	b.n	8000638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4908      	ldr	r1, [pc, #32]	; (8000648 <__NVIC_SetPriority+0x50>)
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	f003 030f 	and.w	r3, r3, #15
 800062e:	3b04      	subs	r3, #4
 8000630:	0112      	lsls	r2, r2, #4
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	440b      	add	r3, r1
 8000636:	761a      	strb	r2, [r3, #24]
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000e100 	.word	0xe000e100
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800064c:	b480      	push	{r7}
 800064e:	b089      	sub	sp, #36	; 0x24
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f003 0307 	and.w	r3, r3, #7
 800065e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	f1c3 0307 	rsb	r3, r3, #7
 8000666:	2b04      	cmp	r3, #4
 8000668:	bf28      	it	cs
 800066a:	2304      	movcs	r3, #4
 800066c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066e:	69fb      	ldr	r3, [r7, #28]
 8000670:	3304      	adds	r3, #4
 8000672:	2b06      	cmp	r3, #6
 8000674:	d902      	bls.n	800067c <NVIC_EncodePriority+0x30>
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	3b03      	subs	r3, #3
 800067a:	e000      	b.n	800067e <NVIC_EncodePriority+0x32>
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000680:	f04f 32ff 	mov.w	r2, #4294967295
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	fa02 f303 	lsl.w	r3, r2, r3
 800068a:	43da      	mvns	r2, r3
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	401a      	ands	r2, r3
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000694:	f04f 31ff 	mov.w	r1, #4294967295
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	fa01 f303 	lsl.w	r3, r1, r3
 800069e:	43d9      	mvns	r1, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a4:	4313      	orrs	r3, r2
         );
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3724      	adds	r7, #36	; 0x24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
	...

080006b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	3b01      	subs	r3, #1
 80006c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006c4:	d301      	bcc.n	80006ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006c6:	2301      	movs	r3, #1
 80006c8:	e00f      	b.n	80006ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ca:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <SysTick_Config+0x40>)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006d2:	210f      	movs	r1, #15
 80006d4:	f04f 30ff 	mov.w	r0, #4294967295
 80006d8:	f7ff ff8e 	bl	80005f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <SysTick_Config+0x40>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e2:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <SysTick_Config+0x40>)
 80006e4:	2207      	movs	r2, #7
 80006e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	e000e010 	.word	0xe000e010

080006f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f7ff ff47 	bl	8000594 <__NVIC_SetPriorityGrouping>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b086      	sub	sp, #24
 8000712:	af00      	add	r7, sp, #0
 8000714:	4603      	mov	r3, r0
 8000716:	60b9      	str	r1, [r7, #8]
 8000718:	607a      	str	r2, [r7, #4]
 800071a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000720:	f7ff ff5c 	bl	80005dc <__NVIC_GetPriorityGrouping>
 8000724:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	68b9      	ldr	r1, [r7, #8]
 800072a:	6978      	ldr	r0, [r7, #20]
 800072c:	f7ff ff8e 	bl	800064c <NVIC_EncodePriority>
 8000730:	4602      	mov	r2, r0
 8000732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000736:	4611      	mov	r1, r2
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff ff5d 	bl	80005f8 <__NVIC_SetPriority>
}
 800073e:	bf00      	nop
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff ffb0 	bl	80006b4 <SysTick_Config>
 8000754:	4603      	mov	r3, r0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000760:	b480      	push	{r7}
 8000762:	b087      	sub	sp, #28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800076e:	e166      	b.n	8000a3e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	2101      	movs	r1, #1
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	fa01 f303 	lsl.w	r3, r1, r3
 800077c:	4013      	ands	r3, r2
 800077e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2b00      	cmp	r3, #0
 8000784:	f000 8158 	beq.w	8000a38 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f003 0303 	and.w	r3, r3, #3
 8000790:	2b01      	cmp	r3, #1
 8000792:	d005      	beq.n	80007a0 <HAL_GPIO_Init+0x40>
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	f003 0303 	and.w	r3, r3, #3
 800079c:	2b02      	cmp	r3, #2
 800079e:	d130      	bne.n	8000802 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	2203      	movs	r2, #3
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	43db      	mvns	r3, r3
 80007b2:	693a      	ldr	r2, [r7, #16]
 80007b4:	4013      	ands	r3, r2
 80007b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	68da      	ldr	r2, [r3, #12]
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	fa02 f303 	lsl.w	r3, r2, r3
 80007c4:	693a      	ldr	r2, [r7, #16]
 80007c6:	4313      	orrs	r3, r2
 80007c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	693a      	ldr	r2, [r7, #16]
 80007ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80007d6:	2201      	movs	r2, #1
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43db      	mvns	r3, r3
 80007e0:	693a      	ldr	r2, [r7, #16]
 80007e2:	4013      	ands	r3, r2
 80007e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	091b      	lsrs	r3, r3, #4
 80007ec:	f003 0201 	and.w	r2, r3, #1
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	693a      	ldr	r2, [r7, #16]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	f003 0303 	and.w	r3, r3, #3
 800080a:	2b03      	cmp	r3, #3
 800080c:	d017      	beq.n	800083e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	2203      	movs	r2, #3
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	43db      	mvns	r3, r3
 8000820:	693a      	ldr	r2, [r7, #16]
 8000822:	4013      	ands	r3, r2
 8000824:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	689a      	ldr	r2, [r3, #8]
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	693a      	ldr	r2, [r7, #16]
 8000834:	4313      	orrs	r3, r2
 8000836:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	f003 0303 	and.w	r3, r3, #3
 8000846:	2b02      	cmp	r3, #2
 8000848:	d123      	bne.n	8000892 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	08da      	lsrs	r2, r3, #3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	3208      	adds	r2, #8
 8000852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000856:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	220f      	movs	r2, #15
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43db      	mvns	r3, r3
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	4013      	ands	r3, r2
 800086c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	691a      	ldr	r2, [r3, #16]
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	f003 0307 	and.w	r3, r3, #7
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	4313      	orrs	r3, r2
 8000882:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	08da      	lsrs	r2, r3, #3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3208      	adds	r2, #8
 800088c:	6939      	ldr	r1, [r7, #16]
 800088e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	2203      	movs	r2, #3
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43db      	mvns	r3, r3
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	4013      	ands	r3, r2
 80008a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	f003 0203 	and.w	r2, r3, #3
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4313      	orrs	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	f000 80b2 	beq.w	8000a38 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d4:	4b61      	ldr	r3, [pc, #388]	; (8000a5c <HAL_GPIO_Init+0x2fc>)
 80008d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d8:	4a60      	ldr	r2, [pc, #384]	; (8000a5c <HAL_GPIO_Init+0x2fc>)
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	6613      	str	r3, [r2, #96]	; 0x60
 80008e0:	4b5e      	ldr	r3, [pc, #376]	; (8000a5c <HAL_GPIO_Init+0x2fc>)
 80008e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80008ec:	4a5c      	ldr	r2, [pc, #368]	; (8000a60 <HAL_GPIO_Init+0x300>)
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	089b      	lsrs	r3, r3, #2
 80008f2:	3302      	adds	r3, #2
 80008f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	f003 0303 	and.w	r3, r3, #3
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	220f      	movs	r2, #15
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	43db      	mvns	r3, r3
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000916:	d02b      	beq.n	8000970 <HAL_GPIO_Init+0x210>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a52      	ldr	r2, [pc, #328]	; (8000a64 <HAL_GPIO_Init+0x304>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d025      	beq.n	800096c <HAL_GPIO_Init+0x20c>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a51      	ldr	r2, [pc, #324]	; (8000a68 <HAL_GPIO_Init+0x308>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d01f      	beq.n	8000968 <HAL_GPIO_Init+0x208>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a50      	ldr	r2, [pc, #320]	; (8000a6c <HAL_GPIO_Init+0x30c>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d019      	beq.n	8000964 <HAL_GPIO_Init+0x204>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a4f      	ldr	r2, [pc, #316]	; (8000a70 <HAL_GPIO_Init+0x310>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d013      	beq.n	8000960 <HAL_GPIO_Init+0x200>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a4e      	ldr	r2, [pc, #312]	; (8000a74 <HAL_GPIO_Init+0x314>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d00d      	beq.n	800095c <HAL_GPIO_Init+0x1fc>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a4d      	ldr	r2, [pc, #308]	; (8000a78 <HAL_GPIO_Init+0x318>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d007      	beq.n	8000958 <HAL_GPIO_Init+0x1f8>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a4c      	ldr	r2, [pc, #304]	; (8000a7c <HAL_GPIO_Init+0x31c>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d101      	bne.n	8000954 <HAL_GPIO_Init+0x1f4>
 8000950:	2307      	movs	r3, #7
 8000952:	e00e      	b.n	8000972 <HAL_GPIO_Init+0x212>
 8000954:	2308      	movs	r3, #8
 8000956:	e00c      	b.n	8000972 <HAL_GPIO_Init+0x212>
 8000958:	2306      	movs	r3, #6
 800095a:	e00a      	b.n	8000972 <HAL_GPIO_Init+0x212>
 800095c:	2305      	movs	r3, #5
 800095e:	e008      	b.n	8000972 <HAL_GPIO_Init+0x212>
 8000960:	2304      	movs	r3, #4
 8000962:	e006      	b.n	8000972 <HAL_GPIO_Init+0x212>
 8000964:	2303      	movs	r3, #3
 8000966:	e004      	b.n	8000972 <HAL_GPIO_Init+0x212>
 8000968:	2302      	movs	r3, #2
 800096a:	e002      	b.n	8000972 <HAL_GPIO_Init+0x212>
 800096c:	2301      	movs	r3, #1
 800096e:	e000      	b.n	8000972 <HAL_GPIO_Init+0x212>
 8000970:	2300      	movs	r3, #0
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	f002 0203 	and.w	r2, r2, #3
 8000978:	0092      	lsls	r2, r2, #2
 800097a:	4093      	lsls	r3, r2
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	4313      	orrs	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000982:	4937      	ldr	r1, [pc, #220]	; (8000a60 <HAL_GPIO_Init+0x300>)
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	089b      	lsrs	r3, r3, #2
 8000988:	3302      	adds	r3, #2
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000990:	4b3b      	ldr	r3, [pc, #236]	; (8000a80 <HAL_GPIO_Init+0x320>)
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	43db      	mvns	r3, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4013      	ands	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d003      	beq.n	80009b4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009b4:	4a32      	ldr	r2, [pc, #200]	; (8000a80 <HAL_GPIO_Init+0x320>)
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80009ba:	4b31      	ldr	r3, [pc, #196]	; (8000a80 <HAL_GPIO_Init+0x320>)
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	43db      	mvns	r3, r3
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	4013      	ands	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d003      	beq.n	80009de <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4313      	orrs	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80009de:	4a28      	ldr	r2, [pc, #160]	; (8000a80 <HAL_GPIO_Init+0x320>)
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80009e4:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <HAL_GPIO_Init+0x320>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	43db      	mvns	r3, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d003      	beq.n	8000a08 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a08:	4a1d      	ldr	r2, [pc, #116]	; (8000a80 <HAL_GPIO_Init+0x320>)
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <HAL_GPIO_Init+0x320>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	43db      	mvns	r3, r3
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d003      	beq.n	8000a32 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a32:	4a13      	ldr	r2, [pc, #76]	; (8000a80 <HAL_GPIO_Init+0x320>)
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	fa22 f303 	lsr.w	r3, r2, r3
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	f47f ae91 	bne.w	8000770 <HAL_GPIO_Init+0x10>
  }
}
 8000a4e:	bf00      	nop
 8000a50:	bf00      	nop
 8000a52:	371c      	adds	r7, #28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40010000 	.word	0x40010000
 8000a64:	48000400 	.word	0x48000400
 8000a68:	48000800 	.word	0x48000800
 8000a6c:	48000c00 	.word	0x48000c00
 8000a70:	48001000 	.word	0x48001000
 8000a74:	48001400 	.word	0x48001400
 8000a78:	48001800 	.word	0x48001800
 8000a7c:	48001c00 	.word	0x48001c00
 8000a80:	40010400 	.word	0x40010400

08000a84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	691a      	ldr	r2, [r3, #16]
 8000a94:	887b      	ldrh	r3, [r7, #2]
 8000a96:	4013      	ands	r3, r2
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d002      	beq.n	8000aa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	73fb      	strb	r3, [r7, #15]
 8000aa0:	e001      	b.n	8000aa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	460b      	mov	r3, r1
 8000abe:	807b      	strh	r3, [r7, #2]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ac4:	787b      	ldrb	r3, [r7, #1]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000aca:	887a      	ldrh	r2, [r7, #2]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ad0:	e002      	b.n	8000ad8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ad2:	887a      	ldrh	r2, [r7, #2]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000af4:	d102      	bne.n	8000afc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000af6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000afa:	e00b      	b.n	8000b14 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b0a:	d102      	bne.n	8000b12 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b10:	e000      	b.n	8000b14 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000b12:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40007000 	.word	0x40007000

08000b24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d141      	bne.n	8000bb6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b32:	4b4b      	ldr	r3, [pc, #300]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b3e:	d131      	bne.n	8000ba4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000b40:	4b47      	ldr	r3, [pc, #284]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b46:	4a46      	ldr	r2, [pc, #280]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b50:	4b43      	ldr	r3, [pc, #268]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b58:	4a41      	ldr	r2, [pc, #260]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000b60:	4b40      	ldr	r3, [pc, #256]	; (8000c64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2232      	movs	r2, #50	; 0x32
 8000b66:	fb02 f303 	mul.w	r3, r2, r3
 8000b6a:	4a3f      	ldr	r2, [pc, #252]	; (8000c68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b70:	0c9b      	lsrs	r3, r3, #18
 8000b72:	3301      	adds	r3, #1
 8000b74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b76:	e002      	b.n	8000b7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b7e:	4b38      	ldr	r3, [pc, #224]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b8a:	d102      	bne.n	8000b92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1f2      	bne.n	8000b78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b92:	4b33      	ldr	r3, [pc, #204]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b9e:	d158      	bne.n	8000c52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	e057      	b.n	8000c54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ba4:	4b2e      	ldr	r3, [pc, #184]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000baa:	4a2d      	ldr	r2, [pc, #180]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000bb4:	e04d      	b.n	8000c52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bbc:	d141      	bne.n	8000c42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bbe:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bca:	d131      	bne.n	8000c30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000bcc:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bd2:	4a23      	ldr	r2, [pc, #140]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bdc:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000be4:	4a1e      	ldr	r2, [pc, #120]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000bec:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2232      	movs	r2, #50	; 0x32
 8000bf2:	fb02 f303 	mul.w	r3, r2, r3
 8000bf6:	4a1c      	ldr	r2, [pc, #112]	; (8000c68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfc:	0c9b      	lsrs	r3, r3, #18
 8000bfe:	3301      	adds	r3, #1
 8000c00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c02:	e002      	b.n	8000c0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c16:	d102      	bne.n	8000c1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d1f2      	bne.n	8000c04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c2a:	d112      	bne.n	8000c52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e011      	b.n	8000c54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000c40:	e007      	b.n	8000c52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c50:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	40007000 	.word	0x40007000
 8000c64:	20000000 	.word	0x20000000
 8000c68:	431bde83 	.word	0x431bde83

08000c6c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d102      	bne.n	8000c80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f000 bc08 	b.w	8001490 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c80:	4b96      	ldr	r3, [pc, #600]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	f003 030c 	and.w	r3, r3, #12
 8000c88:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c8a:	4b94      	ldr	r3, [pc, #592]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 0310 	and.w	r3, r3, #16
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	f000 80e4 	beq.w	8000e6a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d007      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x4c>
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	2b0c      	cmp	r3, #12
 8000cac:	f040 808b 	bne.w	8000dc6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	f040 8087 	bne.w	8000dc6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cb8:	4b88      	ldr	r3, [pc, #544]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 0302 	and.w	r3, r3, #2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d005      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x64>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d101      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e3df      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6a1a      	ldr	r2, [r3, #32]
 8000cd4:	4b81      	ldr	r3, [pc, #516]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0308 	and.w	r3, r3, #8
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d004      	beq.n	8000cea <HAL_RCC_OscConfig+0x7e>
 8000ce0:	4b7e      	ldr	r3, [pc, #504]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ce8:	e005      	b.n	8000cf6 <HAL_RCC_OscConfig+0x8a>
 8000cea:	4b7c      	ldr	r3, [pc, #496]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cf0:	091b      	lsrs	r3, r3, #4
 8000cf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d223      	bcs.n	8000d42 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a1b      	ldr	r3, [r3, #32]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 fd94 	bl	800182c <RCC_SetFlashLatencyFromMSIRange>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e3c0      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d0e:	4b73      	ldr	r3, [pc, #460]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a72      	ldr	r2, [pc, #456]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d14:	f043 0308 	orr.w	r3, r3, #8
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	4b70      	ldr	r3, [pc, #448]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6a1b      	ldr	r3, [r3, #32]
 8000d26:	496d      	ldr	r1, [pc, #436]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d2c:	4b6b      	ldr	r3, [pc, #428]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69db      	ldr	r3, [r3, #28]
 8000d38:	021b      	lsls	r3, r3, #8
 8000d3a:	4968      	ldr	r1, [pc, #416]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	604b      	str	r3, [r1, #4]
 8000d40:	e025      	b.n	8000d8e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d42:	4b66      	ldr	r3, [pc, #408]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a65      	ldr	r2, [pc, #404]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	4b63      	ldr	r3, [pc, #396]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a1b      	ldr	r3, [r3, #32]
 8000d5a:	4960      	ldr	r1, [pc, #384]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d60:	4b5e      	ldr	r3, [pc, #376]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	69db      	ldr	r3, [r3, #28]
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	495b      	ldr	r1, [pc, #364]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d70:	4313      	orrs	r3, r2
 8000d72:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d109      	bne.n	8000d8e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a1b      	ldr	r3, [r3, #32]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 fd54 	bl	800182c <RCC_SetFlashLatencyFromMSIRange>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e380      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d8e:	f000 fcc1 	bl	8001714 <HAL_RCC_GetSysClockFreq>
 8000d92:	4602      	mov	r2, r0
 8000d94:	4b51      	ldr	r3, [pc, #324]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	091b      	lsrs	r3, r3, #4
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	4950      	ldr	r1, [pc, #320]	; (8000ee0 <HAL_RCC_OscConfig+0x274>)
 8000da0:	5ccb      	ldrb	r3, [r1, r3]
 8000da2:	f003 031f 	and.w	r3, r3, #31
 8000da6:	fa22 f303 	lsr.w	r3, r2, r3
 8000daa:	4a4e      	ldr	r2, [pc, #312]	; (8000ee4 <HAL_RCC_OscConfig+0x278>)
 8000dac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dae:	4b4e      	ldr	r3, [pc, #312]	; (8000ee8 <HAL_RCC_OscConfig+0x27c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fb92 	bl	80004dc <HAL_InitTick>
 8000db8:	4603      	mov	r3, r0
 8000dba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d052      	beq.n	8000e68 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	e364      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d032      	beq.n	8000e34 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000dce:	4b43      	ldr	r3, [pc, #268]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a42      	ldr	r2, [pc, #264]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dda:	f7ff fbcf 	bl	800057c <HAL_GetTick>
 8000dde:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000de0:	e008      	b.n	8000df4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000de2:	f7ff fbcb 	bl	800057c <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d901      	bls.n	8000df4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e34d      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000df4:	4b39      	ldr	r3, [pc, #228]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d0f0      	beq.n	8000de2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e00:	4b36      	ldr	r3, [pc, #216]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a35      	ldr	r2, [pc, #212]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e06:	f043 0308 	orr.w	r3, r3, #8
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b33      	ldr	r3, [pc, #204]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a1b      	ldr	r3, [r3, #32]
 8000e18:	4930      	ldr	r1, [pc, #192]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e1e:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	492b      	ldr	r1, [pc, #172]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	604b      	str	r3, [r1, #4]
 8000e32:	e01a      	b.n	8000e6a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e34:	4b29      	ldr	r3, [pc, #164]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a28      	ldr	r2, [pc, #160]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e3a:	f023 0301 	bic.w	r3, r3, #1
 8000e3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e40:	f7ff fb9c 	bl	800057c <HAL_GetTick>
 8000e44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e46:	e008      	b.n	8000e5a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e48:	f7ff fb98 	bl	800057c <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d901      	bls.n	8000e5a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e31a      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e5a:	4b20      	ldr	r3, [pc, #128]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d1f0      	bne.n	8000e48 <HAL_RCC_OscConfig+0x1dc>
 8000e66:	e000      	b.n	8000e6a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d073      	beq.n	8000f5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	2b08      	cmp	r3, #8
 8000e7a:	d005      	beq.n	8000e88 <HAL_RCC_OscConfig+0x21c>
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	2b0c      	cmp	r3, #12
 8000e80:	d10e      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d10b      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d063      	beq.n	8000f5c <HAL_RCC_OscConfig+0x2f0>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d15f      	bne.n	8000f5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e2f7      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea8:	d106      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x24c>
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	e025      	b.n	8000f04 <HAL_RCC_OscConfig+0x298>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ec0:	d114      	bne.n	8000eec <HAL_RCC_OscConfig+0x280>
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ecc:	6013      	str	r3, [r2, #0]
 8000ece:	4b03      	ldr	r3, [pc, #12]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a02      	ldr	r2, [pc, #8]	; (8000edc <HAL_RCC_OscConfig+0x270>)
 8000ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed8:	6013      	str	r3, [r2, #0]
 8000eda:	e013      	b.n	8000f04 <HAL_RCC_OscConfig+0x298>
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	08001a1c 	.word	0x08001a1c
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000004 	.word	0x20000004
 8000eec:	4ba0      	ldr	r3, [pc, #640]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a9f      	ldr	r2, [pc, #636]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4b9d      	ldr	r3, [pc, #628]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a9c      	ldr	r2, [pc, #624]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d013      	beq.n	8000f34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f0c:	f7ff fb36 	bl	800057c <HAL_GetTick>
 8000f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f12:	e008      	b.n	8000f26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f14:	f7ff fb32 	bl	800057c <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b64      	cmp	r3, #100	; 0x64
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e2b4      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f26:	4b92      	ldr	r3, [pc, #584]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d0f0      	beq.n	8000f14 <HAL_RCC_OscConfig+0x2a8>
 8000f32:	e014      	b.n	8000f5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f34:	f7ff fb22 	bl	800057c <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f3c:	f7ff fb1e 	bl	800057c <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b64      	cmp	r3, #100	; 0x64
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e2a0      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f4e:	4b88      	ldr	r3, [pc, #544]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f0      	bne.n	8000f3c <HAL_RCC_OscConfig+0x2d0>
 8000f5a:	e000      	b.n	8000f5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d060      	beq.n	800102c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	2b04      	cmp	r3, #4
 8000f6e:	d005      	beq.n	8000f7c <HAL_RCC_OscConfig+0x310>
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	2b0c      	cmp	r3, #12
 8000f74:	d119      	bne.n	8000faa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d116      	bne.n	8000faa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f7c:	4b7c      	ldr	r3, [pc, #496]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d005      	beq.n	8000f94 <HAL_RCC_OscConfig+0x328>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e27d      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f94:	4b76      	ldr	r3, [pc, #472]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	061b      	lsls	r3, r3, #24
 8000fa2:	4973      	ldr	r1, [pc, #460]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fa8:	e040      	b.n	800102c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d023      	beq.n	8000ffa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fb2:	4b6f      	ldr	r3, [pc, #444]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a6e      	ldr	r2, [pc, #440]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fbe:	f7ff fadd 	bl	800057c <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc6:	f7ff fad9 	bl	800057c <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e25b      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fd8:	4b65      	ldr	r3, [pc, #404]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0f0      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe4:	4b62      	ldr	r3, [pc, #392]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	061b      	lsls	r3, r3, #24
 8000ff2:	495f      	ldr	r1, [pc, #380]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]
 8000ff8:	e018      	b.n	800102c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ffa:	4b5d      	ldr	r3, [pc, #372]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a5c      	ldr	r2, [pc, #368]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8001000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001006:	f7ff fab9 	bl	800057c <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800100e:	f7ff fab5 	bl	800057c <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e237      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001020:	4b53      	ldr	r3, [pc, #332]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1f0      	bne.n	800100e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	2b00      	cmp	r3, #0
 8001036:	d03c      	beq.n	80010b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d01c      	beq.n	800107a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001040:	4b4b      	ldr	r3, [pc, #300]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8001042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001046:	4a4a      	ldr	r2, [pc, #296]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001050:	f7ff fa94 	bl	800057c <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001058:	f7ff fa90 	bl	800057c <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e212      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800106a:	4b41      	ldr	r3, [pc, #260]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 800106c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0ef      	beq.n	8001058 <HAL_RCC_OscConfig+0x3ec>
 8001078:	e01b      	b.n	80010b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800107a:	4b3d      	ldr	r3, [pc, #244]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 800107c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001080:	4a3b      	ldr	r2, [pc, #236]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8001082:	f023 0301 	bic.w	r3, r3, #1
 8001086:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800108a:	f7ff fa77 	bl	800057c <HAL_GetTick>
 800108e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001090:	e008      	b.n	80010a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001092:	f7ff fa73 	bl	800057c <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e1f5      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010a4:	4b32      	ldr	r3, [pc, #200]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 80010a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1ef      	bne.n	8001092 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 80a6 	beq.w	800120c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010c4:	4b2a      	ldr	r3, [pc, #168]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 80010c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10d      	bne.n	80010ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 80010d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d4:	4a26      	ldr	r2, [pc, #152]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 80010d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010da:	6593      	str	r3, [r2, #88]	; 0x58
 80010dc:	4b24      	ldr	r3, [pc, #144]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 80010de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010e8:	2301      	movs	r3, #1
 80010ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010ec:	4b21      	ldr	r3, [pc, #132]	; (8001174 <HAL_RCC_OscConfig+0x508>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d118      	bne.n	800112a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010f8:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <HAL_RCC_OscConfig+0x508>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a1d      	ldr	r2, [pc, #116]	; (8001174 <HAL_RCC_OscConfig+0x508>)
 80010fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001102:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001104:	f7ff fa3a 	bl	800057c <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800110c:	f7ff fa36 	bl	800057c <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e1b8      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <HAL_RCC_OscConfig+0x508>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0f0      	beq.n	800110c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d108      	bne.n	8001144 <HAL_RCC_OscConfig+0x4d8>
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8001134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001142:	e029      	b.n	8001198 <HAL_RCC_OscConfig+0x52c>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	2b05      	cmp	r3, #5
 800114a:	d115      	bne.n	8001178 <HAL_RCC_OscConfig+0x50c>
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 800114e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001152:	4a07      	ldr	r2, [pc, #28]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 800115e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001162:	4a03      	ldr	r2, [pc, #12]	; (8001170 <HAL_RCC_OscConfig+0x504>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800116c:	e014      	b.n	8001198 <HAL_RCC_OscConfig+0x52c>
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000
 8001174:	40007000 	.word	0x40007000
 8001178:	4b9d      	ldr	r3, [pc, #628]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 800117a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800117e:	4a9c      	ldr	r2, [pc, #624]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 8001180:	f023 0301 	bic.w	r3, r3, #1
 8001184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001188:	4b99      	ldr	r3, [pc, #612]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 800118a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800118e:	4a98      	ldr	r2, [pc, #608]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 8001190:	f023 0304 	bic.w	r3, r3, #4
 8001194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d016      	beq.n	80011ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a0:	f7ff f9ec 	bl	800057c <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011a6:	e00a      	b.n	80011be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011a8:	f7ff f9e8 	bl	800057c <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e168      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011be:	4b8c      	ldr	r3, [pc, #560]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 80011c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0ed      	beq.n	80011a8 <HAL_RCC_OscConfig+0x53c>
 80011cc:	e015      	b.n	80011fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011ce:	f7ff f9d5 	bl	800057c <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011d4:	e00a      	b.n	80011ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d6:	f7ff f9d1 	bl	800057c <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e151      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011ec:	4b80      	ldr	r3, [pc, #512]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 80011ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1ed      	bne.n	80011d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011fa:	7ffb      	ldrb	r3, [r7, #31]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d105      	bne.n	800120c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001200:	4b7b      	ldr	r3, [pc, #492]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 8001202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001204:	4a7a      	ldr	r2, [pc, #488]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 8001206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800120a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0320 	and.w	r3, r3, #32
 8001214:	2b00      	cmp	r3, #0
 8001216:	d03c      	beq.n	8001292 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	2b00      	cmp	r3, #0
 800121e:	d01c      	beq.n	800125a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001220:	4b73      	ldr	r3, [pc, #460]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 8001222:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001226:	4a72      	ldr	r2, [pc, #456]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001230:	f7ff f9a4 	bl	800057c <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001238:	f7ff f9a0 	bl	800057c <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e122      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800124a:	4b69      	ldr	r3, [pc, #420]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 800124c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0ef      	beq.n	8001238 <HAL_RCC_OscConfig+0x5cc>
 8001258:	e01b      	b.n	8001292 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800125a:	4b65      	ldr	r3, [pc, #404]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 800125c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001260:	4a63      	ldr	r2, [pc, #396]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 8001262:	f023 0301 	bic.w	r3, r3, #1
 8001266:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800126a:	f7ff f987 	bl	800057c <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001272:	f7ff f983 	bl	800057c <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e105      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001284:	4b5a      	ldr	r3, [pc, #360]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 8001286:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1ef      	bne.n	8001272 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 80f9 	beq.w	800148e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	f040 80cf 	bne.w	8001444 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80012a6:	4b52      	ldr	r3, [pc, #328]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f003 0203 	and.w	r2, r3, #3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d12c      	bne.n	8001314 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	3b01      	subs	r3, #1
 80012c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d123      	bne.n	8001314 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012d8:	429a      	cmp	r2, r3
 80012da:	d11b      	bne.n	8001314 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d113      	bne.n	8001314 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f6:	085b      	lsrs	r3, r3, #1
 80012f8:	3b01      	subs	r3, #1
 80012fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d109      	bne.n	8001314 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	085b      	lsrs	r3, r3, #1
 800130c:	3b01      	subs	r3, #1
 800130e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001310:	429a      	cmp	r2, r3
 8001312:	d071      	beq.n	80013f8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	2b0c      	cmp	r3, #12
 8001318:	d068      	beq.n	80013ec <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800131a:	4b35      	ldr	r3, [pc, #212]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d105      	bne.n	8001332 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001326:	4b32      	ldr	r3, [pc, #200]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e0ac      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001336:	4b2e      	ldr	r3, [pc, #184]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a2d      	ldr	r2, [pc, #180]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 800133c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001340:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001342:	f7ff f91b 	bl	800057c <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800134a:	f7ff f917 	bl	800057c <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e099      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800135c:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1f0      	bne.n	800134a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001368:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <HAL_RCC_OscConfig+0x788>)
 800136e:	4013      	ands	r3, r2
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001378:	3a01      	subs	r2, #1
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	4311      	orrs	r1, r2
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001382:	0212      	lsls	r2, r2, #8
 8001384:	4311      	orrs	r1, r2
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800138a:	0852      	lsrs	r2, r2, #1
 800138c:	3a01      	subs	r2, #1
 800138e:	0552      	lsls	r2, r2, #21
 8001390:	4311      	orrs	r1, r2
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001396:	0852      	lsrs	r2, r2, #1
 8001398:	3a01      	subs	r2, #1
 800139a:	0652      	lsls	r2, r2, #25
 800139c:	4311      	orrs	r1, r2
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013a2:	06d2      	lsls	r2, r2, #27
 80013a4:	430a      	orrs	r2, r1
 80013a6:	4912      	ldr	r1, [pc, #72]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013ac:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0f      	ldr	r2, [pc, #60]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 80013b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013b8:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 80013be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013c4:	f7ff f8da 	bl	800057c <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ca:	e008      	b.n	80013de <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013cc:	f7ff f8d6 	bl	800057c <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e058      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013de:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <HAL_RCC_OscConfig+0x784>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d0f0      	beq.n	80013cc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013ea:	e050      	b.n	800148e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e04f      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
 80013f0:	40021000 	.word	0x40021000
 80013f4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013f8:	4b27      	ldr	r3, [pc, #156]	; (8001498 <HAL_RCC_OscConfig+0x82c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d144      	bne.n	800148e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001404:	4b24      	ldr	r3, [pc, #144]	; (8001498 <HAL_RCC_OscConfig+0x82c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a23      	ldr	r2, [pc, #140]	; (8001498 <HAL_RCC_OscConfig+0x82c>)
 800140a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800140e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001410:	4b21      	ldr	r3, [pc, #132]	; (8001498 <HAL_RCC_OscConfig+0x82c>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	4a20      	ldr	r2, [pc, #128]	; (8001498 <HAL_RCC_OscConfig+0x82c>)
 8001416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800141a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800141c:	f7ff f8ae 	bl	800057c <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001424:	f7ff f8aa 	bl	800057c <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e02c      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <HAL_RCC_OscConfig+0x82c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0x7b8>
 8001442:	e024      	b.n	800148e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	2b0c      	cmp	r3, #12
 8001448:	d01f      	beq.n	800148a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <HAL_RCC_OscConfig+0x82c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <HAL_RCC_OscConfig+0x82c>)
 8001450:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001456:	f7ff f891 	bl	800057c <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800145e:	f7ff f88d 	bl	800057c <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e00f      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_RCC_OscConfig+0x82c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f0      	bne.n	800145e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_RCC_OscConfig+0x82c>)
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	4905      	ldr	r1, [pc, #20]	; (8001498 <HAL_RCC_OscConfig+0x82c>)
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_RCC_OscConfig+0x830>)
 8001484:	4013      	ands	r3, r2
 8001486:	60cb      	str	r3, [r1, #12]
 8001488:	e001      	b.n	800148e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3720      	adds	r7, #32
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40021000 	.word	0x40021000
 800149c:	feeefffc 	.word	0xfeeefffc

080014a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e11d      	b.n	80016f4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014b8:	4b90      	ldr	r3, [pc, #576]	; (80016fc <HAL_RCC_ClockConfig+0x25c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 030f 	and.w	r3, r3, #15
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d910      	bls.n	80014e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c6:	4b8d      	ldr	r3, [pc, #564]	; (80016fc <HAL_RCC_ClockConfig+0x25c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 020f 	bic.w	r2, r3, #15
 80014ce:	498b      	ldr	r1, [pc, #556]	; (80016fc <HAL_RCC_ClockConfig+0x25c>)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d6:	4b89      	ldr	r3, [pc, #548]	; (80016fc <HAL_RCC_ClockConfig+0x25c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e105      	b.n	80016f4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d010      	beq.n	8001516 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	4b81      	ldr	r3, [pc, #516]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001500:	429a      	cmp	r2, r3
 8001502:	d908      	bls.n	8001516 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001504:	4b7e      	ldr	r3, [pc, #504]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	497b      	ldr	r1, [pc, #492]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 8001512:	4313      	orrs	r3, r2
 8001514:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d079      	beq.n	8001616 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b03      	cmp	r3, #3
 8001528:	d11e      	bne.n	8001568 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800152a:	4b75      	ldr	r3, [pc, #468]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e0dc      	b.n	80016f4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800153a:	f000 f9d1 	bl	80018e0 <RCC_GetSysClockFreqFromPLLSource>
 800153e:	4603      	mov	r3, r0
 8001540:	4a70      	ldr	r2, [pc, #448]	; (8001704 <HAL_RCC_ClockConfig+0x264>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d946      	bls.n	80015d4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001546:	4b6e      	ldr	r3, [pc, #440]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d140      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001552:	4b6b      	ldr	r3, [pc, #428]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800155a:	4a69      	ldr	r2, [pc, #420]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 800155c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001560:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	e035      	b.n	80015d4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d107      	bne.n	8001580 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001570:	4b63      	ldr	r3, [pc, #396]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d115      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e0b9      	b.n	80016f4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d107      	bne.n	8001598 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001588:	4b5d      	ldr	r3, [pc, #372]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d109      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0ad      	b.n	80016f4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001598:	4b59      	ldr	r3, [pc, #356]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0a5      	b.n	80016f4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80015a8:	f000 f8b4 	bl	8001714 <HAL_RCC_GetSysClockFreq>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4a55      	ldr	r2, [pc, #340]	; (8001704 <HAL_RCC_ClockConfig+0x264>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d90f      	bls.n	80015d4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80015b4:	4b52      	ldr	r3, [pc, #328]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d109      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80015c0:	4b4f      	ldr	r3, [pc, #316]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015c8:	4a4d      	ldr	r2, [pc, #308]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 80015ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ce:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015d4:	4b4a      	ldr	r3, [pc, #296]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f023 0203 	bic.w	r2, r3, #3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	4947      	ldr	r1, [pc, #284]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015e6:	f7fe ffc9 	bl	800057c <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ec:	e00a      	b.n	8001604 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ee:	f7fe ffc5 	bl	800057c <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e077      	b.n	80016f4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001604:	4b3e      	ldr	r3, [pc, #248]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 020c 	and.w	r2, r3, #12
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	429a      	cmp	r2, r3
 8001614:	d1eb      	bne.n	80015ee <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	2b80      	cmp	r3, #128	; 0x80
 800161a:	d105      	bne.n	8001628 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800161c:	4b38      	ldr	r3, [pc, #224]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4a37      	ldr	r2, [pc, #220]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 8001622:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001626:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d010      	beq.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	4b31      	ldr	r3, [pc, #196]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001640:	429a      	cmp	r2, r3
 8001642:	d208      	bcs.n	8001656 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001644:	4b2e      	ldr	r3, [pc, #184]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	492b      	ldr	r1, [pc, #172]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 8001652:	4313      	orrs	r3, r2
 8001654:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001656:	4b29      	ldr	r3, [pc, #164]	; (80016fc <HAL_RCC_ClockConfig+0x25c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	429a      	cmp	r2, r3
 8001662:	d210      	bcs.n	8001686 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001664:	4b25      	ldr	r3, [pc, #148]	; (80016fc <HAL_RCC_ClockConfig+0x25c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 020f 	bic.w	r2, r3, #15
 800166c:	4923      	ldr	r1, [pc, #140]	; (80016fc <HAL_RCC_ClockConfig+0x25c>)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	4313      	orrs	r3, r2
 8001672:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001674:	4b21      	ldr	r3, [pc, #132]	; (80016fc <HAL_RCC_ClockConfig+0x25c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d001      	beq.n	8001686 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e036      	b.n	80016f4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	2b00      	cmp	r3, #0
 8001690:	d008      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001692:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	4918      	ldr	r1, [pc, #96]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d009      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4910      	ldr	r1, [pc, #64]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016c4:	f000 f826 	bl	8001714 <HAL_RCC_GetSysClockFreq>
 80016c8:	4602      	mov	r2, r0
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <HAL_RCC_ClockConfig+0x260>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	f003 030f 	and.w	r3, r3, #15
 80016d4:	490c      	ldr	r1, [pc, #48]	; (8001708 <HAL_RCC_ClockConfig+0x268>)
 80016d6:	5ccb      	ldrb	r3, [r1, r3]
 80016d8:	f003 031f 	and.w	r3, r3, #31
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
 80016e0:	4a0a      	ldr	r2, [pc, #40]	; (800170c <HAL_RCC_ClockConfig+0x26c>)
 80016e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_RCC_ClockConfig+0x270>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe fef7 	bl	80004dc <HAL_InitTick>
 80016ee:	4603      	mov	r3, r0
 80016f0:	73fb      	strb	r3, [r7, #15]

  return status;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40022000 	.word	0x40022000
 8001700:	40021000 	.word	0x40021000
 8001704:	04c4b400 	.word	0x04c4b400
 8001708:	08001a1c 	.word	0x08001a1c
 800170c:	20000000 	.word	0x20000000
 8001710:	20000004 	.word	0x20000004

08001714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001722:	4b3e      	ldr	r3, [pc, #248]	; (800181c <HAL_RCC_GetSysClockFreq+0x108>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800172c:	4b3b      	ldr	r3, [pc, #236]	; (800181c <HAL_RCC_GetSysClockFreq+0x108>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_GetSysClockFreq+0x34>
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	2b0c      	cmp	r3, #12
 8001740:	d121      	bne.n	8001786 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d11e      	bne.n	8001786 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001748:	4b34      	ldr	r3, [pc, #208]	; (800181c <HAL_RCC_GetSysClockFreq+0x108>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b00      	cmp	r3, #0
 8001752:	d107      	bne.n	8001764 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001754:	4b31      	ldr	r3, [pc, #196]	; (800181c <HAL_RCC_GetSysClockFreq+0x108>)
 8001756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800175a:	0a1b      	lsrs	r3, r3, #8
 800175c:	f003 030f 	and.w	r3, r3, #15
 8001760:	61fb      	str	r3, [r7, #28]
 8001762:	e005      	b.n	8001770 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001764:	4b2d      	ldr	r3, [pc, #180]	; (800181c <HAL_RCC_GetSysClockFreq+0x108>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001770:	4a2b      	ldr	r2, [pc, #172]	; (8001820 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001778:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10d      	bne.n	800179c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001784:	e00a      	b.n	800179c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	2b04      	cmp	r3, #4
 800178a:	d102      	bne.n	8001792 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800178c:	4b25      	ldr	r3, [pc, #148]	; (8001824 <HAL_RCC_GetSysClockFreq+0x110>)
 800178e:	61bb      	str	r3, [r7, #24]
 8001790:	e004      	b.n	800179c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	2b08      	cmp	r3, #8
 8001796:	d101      	bne.n	800179c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001798:	4b23      	ldr	r3, [pc, #140]	; (8001828 <HAL_RCC_GetSysClockFreq+0x114>)
 800179a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	2b0c      	cmp	r3, #12
 80017a0:	d134      	bne.n	800180c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017a2:	4b1e      	ldr	r3, [pc, #120]	; (800181c <HAL_RCC_GetSysClockFreq+0x108>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d003      	beq.n	80017ba <HAL_RCC_GetSysClockFreq+0xa6>
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d003      	beq.n	80017c0 <HAL_RCC_GetSysClockFreq+0xac>
 80017b8:	e005      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <HAL_RCC_GetSysClockFreq+0x110>)
 80017bc:	617b      	str	r3, [r7, #20]
      break;
 80017be:	e005      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_RCC_GetSysClockFreq+0x114>)
 80017c2:	617b      	str	r3, [r7, #20]
      break;
 80017c4:	e002      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	617b      	str	r3, [r7, #20]
      break;
 80017ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017cc:	4b13      	ldr	r3, [pc, #76]	; (800181c <HAL_RCC_GetSysClockFreq+0x108>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	3301      	adds	r3, #1
 80017d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017da:	4b10      	ldr	r3, [pc, #64]	; (800181c <HAL_RCC_GetSysClockFreq+0x108>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	0a1b      	lsrs	r3, r3, #8
 80017e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	fb03 f202 	mul.w	r2, r3, r2
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_RCC_GetSysClockFreq+0x108>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	0e5b      	lsrs	r3, r3, #25
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	3301      	adds	r3, #1
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800180c:	69bb      	ldr	r3, [r7, #24]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	; 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000
 8001820:	08001a2c 	.word	0x08001a2c
 8001824:	00f42400 	.word	0x00f42400
 8001828:	007a1200 	.word	0x007a1200

0800182c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001834:	2300      	movs	r3, #0
 8001836:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001838:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800183a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001844:	f7ff f94e 	bl	8000ae4 <HAL_PWREx_GetVoltageRange>
 8001848:	6178      	str	r0, [r7, #20]
 800184a:	e014      	b.n	8001876 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800184c:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001850:	4a21      	ldr	r2, [pc, #132]	; (80018d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001856:	6593      	str	r3, [r2, #88]	; 0x58
 8001858:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800185a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001864:	f7ff f93e 	bl	8000ae4 <HAL_PWREx_GetVoltageRange>
 8001868:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800186a:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	4a1a      	ldr	r2, [pc, #104]	; (80018d8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001874:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d10b      	bne.n	8001896 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b80      	cmp	r3, #128	; 0x80
 8001882:	d913      	bls.n	80018ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2ba0      	cmp	r3, #160	; 0xa0
 8001888:	d902      	bls.n	8001890 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800188a:	2302      	movs	r3, #2
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	e00d      	b.n	80018ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001890:	2301      	movs	r3, #1
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	e00a      	b.n	80018ac <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b7f      	cmp	r3, #127	; 0x7f
 800189a:	d902      	bls.n	80018a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800189c:	2302      	movs	r3, #2
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	e004      	b.n	80018ac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b70      	cmp	r3, #112	; 0x70
 80018a6:	d101      	bne.n	80018ac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018a8:	2301      	movs	r3, #1
 80018aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f023 020f 	bic.w	r2, r3, #15
 80018b4:	4909      	ldr	r1, [pc, #36]	; (80018dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 030f 	and.w	r3, r3, #15
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d001      	beq.n	80018ce <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40022000 	.word	0x40022000

080018e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018e6:	4b2d      	ldr	r3, [pc, #180]	; (800199c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d00b      	beq.n	800190e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d825      	bhi.n	8001948 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d008      	beq.n	8001914 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d11f      	bne.n	8001948 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001908:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800190a:	613b      	str	r3, [r7, #16]
    break;
 800190c:	e01f      	b.n	800194e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800190e:	4b25      	ldr	r3, [pc, #148]	; (80019a4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001910:	613b      	str	r3, [r7, #16]
    break;
 8001912:	e01c      	b.n	800194e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001914:	4b21      	ldr	r3, [pc, #132]	; (800199c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d107      	bne.n	8001930 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001920:	4b1e      	ldr	r3, [pc, #120]	; (800199c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001926:	0a1b      	lsrs	r3, r3, #8
 8001928:	f003 030f 	and.w	r3, r3, #15
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	e005      	b.n	800193c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001930:	4b1a      	ldr	r3, [pc, #104]	; (800199c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800193c:	4a1a      	ldr	r2, [pc, #104]	; (80019a8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001944:	613b      	str	r3, [r7, #16]
    break;
 8001946:	e002      	b.n	800194e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
    break;
 800194c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800194e:	4b13      	ldr	r3, [pc, #76]	; (800199c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	091b      	lsrs	r3, r3, #4
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	3301      	adds	r3, #1
 800195a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	fb03 f202 	mul.w	r2, r3, r2
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001972:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	0e5b      	lsrs	r3, r3, #25
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	3301      	adds	r3, #1
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	fbb2 f3f3 	udiv	r3, r2, r3
 800198c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800198e:	683b      	ldr	r3, [r7, #0]
}
 8001990:	4618      	mov	r0, r3
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	40021000 	.word	0x40021000
 80019a0:	00f42400 	.word	0x00f42400
 80019a4:	007a1200 	.word	0x007a1200
 80019a8:	08001a2c 	.word	0x08001a2c

080019ac <memset>:
 80019ac:	4402      	add	r2, r0
 80019ae:	4603      	mov	r3, r0
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d100      	bne.n	80019b6 <memset+0xa>
 80019b4:	4770      	bx	lr
 80019b6:	f803 1b01 	strb.w	r1, [r3], #1
 80019ba:	e7f9      	b.n	80019b0 <memset+0x4>

080019bc <__libc_init_array>:
 80019bc:	b570      	push	{r4, r5, r6, lr}
 80019be:	4d0d      	ldr	r5, [pc, #52]	; (80019f4 <__libc_init_array+0x38>)
 80019c0:	4c0d      	ldr	r4, [pc, #52]	; (80019f8 <__libc_init_array+0x3c>)
 80019c2:	1b64      	subs	r4, r4, r5
 80019c4:	10a4      	asrs	r4, r4, #2
 80019c6:	2600      	movs	r6, #0
 80019c8:	42a6      	cmp	r6, r4
 80019ca:	d109      	bne.n	80019e0 <__libc_init_array+0x24>
 80019cc:	4d0b      	ldr	r5, [pc, #44]	; (80019fc <__libc_init_array+0x40>)
 80019ce:	4c0c      	ldr	r4, [pc, #48]	; (8001a00 <__libc_init_array+0x44>)
 80019d0:	f000 f818 	bl	8001a04 <_init>
 80019d4:	1b64      	subs	r4, r4, r5
 80019d6:	10a4      	asrs	r4, r4, #2
 80019d8:	2600      	movs	r6, #0
 80019da:	42a6      	cmp	r6, r4
 80019dc:	d105      	bne.n	80019ea <__libc_init_array+0x2e>
 80019de:	bd70      	pop	{r4, r5, r6, pc}
 80019e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80019e4:	4798      	blx	r3
 80019e6:	3601      	adds	r6, #1
 80019e8:	e7ee      	b.n	80019c8 <__libc_init_array+0xc>
 80019ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80019ee:	4798      	blx	r3
 80019f0:	3601      	adds	r6, #1
 80019f2:	e7f2      	b.n	80019da <__libc_init_array+0x1e>
 80019f4:	08001a5c 	.word	0x08001a5c
 80019f8:	08001a5c 	.word	0x08001a5c
 80019fc:	08001a5c 	.word	0x08001a5c
 8001a00:	08001a60 	.word	0x08001a60

08001a04 <_init>:
 8001a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a06:	bf00      	nop
 8001a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a0a:	bc08      	pop	{r3}
 8001a0c:	469e      	mov	lr, r3
 8001a0e:	4770      	bx	lr

08001a10 <_fini>:
 8001a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a12:	bf00      	nop
 8001a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a16:	bc08      	pop	{r3}
 8001a18:	469e      	mov	lr, r3
 8001a1a:	4770      	bx	lr
