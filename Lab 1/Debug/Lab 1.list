
Lab 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ddc  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000086c  08001f9c  08001f9c  00011f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002808  08002808  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002808  08002808  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002808  08002808  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002808  08002808  00012808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800280c  0800280c  0001280c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000005c  0800286c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  0800286c  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_line   00006fe7  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 000000c5  00000000  00000000  0002712b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00008a95  00000000  00000000  000271f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001739  00000000  00000000  0002fc85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000638  00000000  00000000  000313c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9aad  00000000  00000000  000319f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000414  00000000  00000000  0012b4a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002904e  00000000  00000000  0012b8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000017ac  00000000  00000000  00154908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001f4  00000000  00000000  001560b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  001562a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08001f84 	.word	0x08001f84

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000060 	.word	0x20000060
 80001fc:	08001f84 	.word	0x08001f84

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__gedf2>:
 8000578:	f04f 3cff 	mov.w	ip, #4294967295
 800057c:	e006      	b.n	800058c <__cmpdf2+0x4>
 800057e:	bf00      	nop

08000580 <__ledf2>:
 8000580:	f04f 0c01 	mov.w	ip, #1
 8000584:	e002      	b.n	800058c <__cmpdf2+0x4>
 8000586:	bf00      	nop

08000588 <__cmpdf2>:
 8000588:	f04f 0c01 	mov.w	ip, #1
 800058c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000590:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000594:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000598:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800059c:	bf18      	it	ne
 800059e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005a2:	d01b      	beq.n	80005dc <__cmpdf2+0x54>
 80005a4:	b001      	add	sp, #4
 80005a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005aa:	bf0c      	ite	eq
 80005ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005b0:	ea91 0f03 	teqne	r1, r3
 80005b4:	bf02      	ittt	eq
 80005b6:	ea90 0f02 	teqeq	r0, r2
 80005ba:	2000      	moveq	r0, #0
 80005bc:	4770      	bxeq	lr
 80005be:	f110 0f00 	cmn.w	r0, #0
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf58      	it	pl
 80005c8:	4299      	cmppl	r1, r3
 80005ca:	bf08      	it	eq
 80005cc:	4290      	cmpeq	r0, r2
 80005ce:	bf2c      	ite	cs
 80005d0:	17d8      	asrcs	r0, r3, #31
 80005d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005d6:	f040 0001 	orr.w	r0, r0, #1
 80005da:	4770      	bx	lr
 80005dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005e4:	d102      	bne.n	80005ec <__cmpdf2+0x64>
 80005e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005ea:	d107      	bne.n	80005fc <__cmpdf2+0x74>
 80005ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005f4:	d1d6      	bne.n	80005a4 <__cmpdf2+0x1c>
 80005f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005fa:	d0d3      	beq.n	80005a4 <__cmpdf2+0x1c>
 80005fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <__aeabi_cdrcmple>:
 8000604:	4684      	mov	ip, r0
 8000606:	4610      	mov	r0, r2
 8000608:	4662      	mov	r2, ip
 800060a:	468c      	mov	ip, r1
 800060c:	4619      	mov	r1, r3
 800060e:	4663      	mov	r3, ip
 8000610:	e000      	b.n	8000614 <__aeabi_cdcmpeq>
 8000612:	bf00      	nop

08000614 <__aeabi_cdcmpeq>:
 8000614:	b501      	push	{r0, lr}
 8000616:	f7ff ffb7 	bl	8000588 <__cmpdf2>
 800061a:	2800      	cmp	r0, #0
 800061c:	bf48      	it	mi
 800061e:	f110 0f00 	cmnmi.w	r0, #0
 8000622:	bd01      	pop	{r0, pc}

08000624 <__aeabi_dcmpeq>:
 8000624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000628:	f7ff fff4 	bl	8000614 <__aeabi_cdcmpeq>
 800062c:	bf0c      	ite	eq
 800062e:	2001      	moveq	r0, #1
 8000630:	2000      	movne	r0, #0
 8000632:	f85d fb08 	ldr.w	pc, [sp], #8
 8000636:	bf00      	nop

08000638 <__aeabi_dcmplt>:
 8000638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800063c:	f7ff ffea 	bl	8000614 <__aeabi_cdcmpeq>
 8000640:	bf34      	ite	cc
 8000642:	2001      	movcc	r0, #1
 8000644:	2000      	movcs	r0, #0
 8000646:	f85d fb08 	ldr.w	pc, [sp], #8
 800064a:	bf00      	nop

0800064c <__aeabi_dcmple>:
 800064c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000650:	f7ff ffe0 	bl	8000614 <__aeabi_cdcmpeq>
 8000654:	bf94      	ite	ls
 8000656:	2001      	movls	r0, #1
 8000658:	2000      	movhi	r0, #0
 800065a:	f85d fb08 	ldr.w	pc, [sp], #8
 800065e:	bf00      	nop

08000660 <__aeabi_dcmpge>:
 8000660:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000664:	f7ff ffce 	bl	8000604 <__aeabi_cdrcmple>
 8000668:	bf94      	ite	ls
 800066a:	2001      	movls	r0, #1
 800066c:	2000      	movhi	r0, #0
 800066e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000672:	bf00      	nop

08000674 <__aeabi_dcmpgt>:
 8000674:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000678:	f7ff ffc4 	bl	8000604 <__aeabi_cdrcmple>
 800067c:	bf34      	ite	cc
 800067e:	2001      	movcc	r0, #1
 8000680:	2000      	movcs	r0, #0
 8000682:	f85d fb08 	ldr.w	pc, [sp], #8
 8000686:	bf00      	nop

08000688 <asmSqrt>:
 * R0 = pointer to output
 * if input is negative, will return the input itself
 */

 asmSqrt:
 	VMOV 		S1, #1
 8000688:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 	VSUB.F32	S1, S1
 800068c:	ee70 0ae0 	vsub.f32	s1, s1, s1
 	VCMP.F32	S0, S1
 8000690:	eeb4 0a60 	vcmp.f32	s0, s1
 	FMSTAT // copies FPSCR flags into CPSR so that we can use BLT
 8000694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 	BLT			done
 8000698:	db01      	blt.n	800069e <done>
 	VSQRT.F32 	S0, S0
 800069a:	eeb1 0ac0 	vsqrt.f32	s0, s0

0800069e <done>:

 done:
 	VSTR.32	S0, [R0]
 800069e:	ed80 0a00 	vstr	s0, [r0]
 	BX LR
 80006a2:	4770      	bx	lr

080006a4 <asmTranscendental>:
 * S7 = current
 * R1 = iterator
 */

asmTranscendental:
PUSH {LR, V1}
 80006a4:	b510      	push	{r4, lr}
VMOV S3, #1
 80006a6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
VMOV S4, #1
 80006aa:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
VMOV S7, #10
 80006ae:	eef2 3a04 	vmov.f32	s7, #36	; 0x41200000  10.0
VDIV.F32 S4, S4, S7
 80006b2:	ee82 2a23 	vdiv.f32	s4, s4, s7
VMUL.F32 S7, S7, S7
 80006b6:	ee63 3aa3 	vmul.f32	s7, s7, s7
VMUL.F32 S7, S7, S7
 80006ba:	ee63 3aa3 	vmul.f32	s7, s7, s7
VDIV.F32 S3, S3, S7
 80006be:	eec1 1aa3 	vdiv.f32	s3, s3, s7
VMOV S5, S0
 80006c2:	eef0 2a40 	vmov.f32	s5, s0
VMOV S7, #-1
 80006c6:	eeff 3a00 	vmov.f32	s7, #240	; 0xbf800000 -1.0
// VMOV S8, #20
MOV V1, #60
 80006ca:	f04f 043c 	mov.w	r4, #60	; 0x3c

080006ce <loop>:

loop:
//tewt
//sin and cosin prep
//objective is to create sin_arg*omega for quicker processing
VMOV        S6, S1
 80006ce:	eeb0 3a60 	vmov.f32	s6, s1
// FIX: S4 wasnt getting updated to x0 after first iteration
VMOV S4, S0
 80006d2:	eeb0 2a40 	vmov.f32	s4, s0
VMLA.F32     S6, S5, S4 //this gives us omega*x0+phi
 80006d6:	ee02 3a82 	vmla.f32	s6, s5, s4
VMOV         S0, S6
 80006da:	eeb0 0a43 	vmov.f32	s0, s6
BL arm_sin_f32
 80006de:	f001 fb6d 	bl	8001dbc <arm_sin_f32>
VMUL.F32    S2, S0, S5
 80006e2:	ee20 1a22 	vmul.f32	s2, s0, s5
VMOV         S0, S6
 80006e6:	eeb0 0a43 	vmov.f32	s0, s6
BL arm_cos_f32
 80006ea:	f001 fbad 	bl	8001e48 <arm_cos_f32>

//Now we have S2=sin_arg*omega, S0=cos_arg, S4=x0, S6 is now freed up
//time to do more math
VMLA.F32     S0, S4, S4 //takes care of x0^2+cos_arg
 80006ee:	ee02 0a02 	vmla.f32	s0, s4, s4
VMLA.F32    S0, S2, S4 //takes care of x0^2+cos_arg+x_0*omega*sin_arg
 80006f2:	ee01 0a02 	vmla.f32	s0, s2, s4
VMOV        S6, #2
 80006f6:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
VMLA.F32    S2, S6, S4  //
 80006fa:	ee03 1a02 	vmla.f32	s2, s6, s4
VDIV.F32    S0, S0, S2
 80006fe:	ee80 0a01 	vdiv.f32	s0, s0, s2
//Check to see if stabilization has occured using tolerance

VSUB.F32    S6, S0, S7
 8000702:	ee30 3a63 	vsub.f32	s6, s0, s7
VABS.F32    S6, S6
 8000706:	eeb0 3ac3 	vabs.f32	s6, s6
VCMP.F32    S6, S3
 800070a:	eeb4 3a61 	vcmp.f32	s6, s3
FMSTAT
 800070e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
BGT no_soln
 8000712:	dc04      	bgt.n	800071e <no_soln>
BLE            done
 8000714:	dd05      	ble.n	8000722 <done>
VSUB.F32     S8, S8, S7
VMOV         S7, S0
VCMP.F32    S8, #0
FMSTAT
*/
VMOV S7, S0
 8000716:	eef0 3a40 	vmov.f32	s7, s0
SUBS V1, V1, #1
 800071a:	3c01      	subs	r4, #1
BGT loop
 800071c:	dcd7      	bgt.n	80006ce <loop>

0800071e <no_soln>:
//TODO: if no solution is found
no_soln:
VSUB.F32 S0, S0, S0
 800071e:	ee30 0a40 	vsub.f32	s0, s0, s0

08000722 <done>:

done:
// VMOV S0, S5
VSTR.32        S0, [R0]
 8000722:	ed80 0a00 	vstr	s0, [r0]
POP {LR, V1}
 8000726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
BX LR                    // return
 800072a:	4770      	bx	lr

0800072c <c_sqrt>:
#define NUM_ITERATIONS 30
/**
 * Implementation of the square root function using Newton-Raphson method.
 * Returns -1 if parameter 'in' is negative.
 */
void c_sqrt(float32_t in, float32_t *pOut) {
 800072c:	b480      	push	{r7}
 800072e:	b087      	sub	sp, #28
 8000730:	af00      	add	r7, sp, #0
 8000732:	ed87 0a01 	vstr	s0, [r7, #4]
 8000736:	6038      	str	r0, [r7, #0]
	// edge cases
	if (in < 0) {
 8000738:	edd7 7a01 	vldr	s15, [r7, #4]
 800073c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000744:	d503      	bpl.n	800074e <c_sqrt+0x22>
		(*pOut) = -1;
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	4a23      	ldr	r2, [pc, #140]	; (80007d8 <c_sqrt+0xac>)
 800074a:	601a      	str	r2, [r3, #0]
		return;
 800074c:	e03e      	b.n	80007cc <c_sqrt+0xa0>
	}

	if (in == 0) {
 800074e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000752:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075a:	d104      	bne.n	8000766 <c_sqrt+0x3a>
		(*pOut) = 0;
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	f04f 0200 	mov.w	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
		return;
 8000764:	e032      	b.n	80007cc <c_sqrt+0xa0>
	}

	// initial guess x_0
	float32_t x_0 = in/2; // divide by 2
 8000766:	ed97 7a01 	vldr	s14, [r7, #4]
 800076a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800076e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000772:	edc7 7a05 	vstr	s15, [r7, #20]
	float32_t cur = -1;
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <c_sqrt+0xac>)
 8000778:	613b      	str	r3, [r7, #16]

	// iteration loops
	for (int i = 0; i < NUM_ITERATIONS; i++) {
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	e01d      	b.n	80007bc <c_sqrt+0x90>
		x_0 = (x_0*x_0 + in)/(2*x_0);
 8000780:	edd7 7a05 	vldr	s15, [r7, #20]
 8000784:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000788:	edd7 7a01 	vldr	s15, [r7, #4]
 800078c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000790:	edd7 7a05 	vldr	s15, [r7, #20]
 8000794:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800079c:	edc7 7a05 	vstr	s15, [r7, #20]
		// checking to see if we have stabilized on a value
		if (cur == x_0) {
 80007a0:	ed97 7a04 	vldr	s14, [r7, #16]
 80007a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80007a8:	eeb4 7a67 	vcmp.f32	s14, s15
 80007ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007b0:	d008      	beq.n	80007c4 <c_sqrt+0x98>
			break;
		}
		cur = x_0;
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < NUM_ITERATIONS; i++) {
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	3301      	adds	r3, #1
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2b1d      	cmp	r3, #29
 80007c0:	ddde      	ble.n	8000780 <c_sqrt+0x54>
 80007c2:	e000      	b.n	80007c6 <c_sqrt+0x9a>
			break;
 80007c4:	bf00      	nop
	}
	(*pOut) = x_0;
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	697a      	ldr	r2, [r7, #20]
 80007ca:	601a      	str	r2, [r3, #0]
}
 80007cc:	371c      	adds	r7, #28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	bf800000 	.word	0xbf800000
 80007dc:	00000000 	.word	0x00000000

080007e0 <c_trans>:
/**
 * Finds the solution of the transcendental equation: x^2 = cos(omega*x + phi) using the Newton-Raphson Method,
 * where x is a solution to this equation, and omega,phi are constants. If there are
 * no solutions, returns 0. Will be precise up to 0.0001.
 */
void c_trans(const float32_t omega, const float32_t phi, float32_t *pOut) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	ed87 0a03 	vstr	s0, [r7, #12]
 80007ea:	edc7 0a02 	vstr	s1, [r7, #8]
 80007ee:	6078      	str	r0, [r7, #4]
	// edge cases TODO


	// initial guess, using desmos on the function f(x) = x^2 - cos(wx + phi)
	// it is clear that a solution is often near x = 0, therefore initial guess is close to 0
	float32_t x_0 = 0.1;
 80007f0:	4b3d      	ldr	r3, [pc, #244]	; (80008e8 <c_trans+0x108>)
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
	float32_t sin_arg;
	float32_t cos_arg;
	float32_t cur = -1;
 80007f4:	4b3d      	ldr	r3, [pc, #244]	; (80008ec <c_trans+0x10c>)
 80007f6:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < NUM_ITERATIONS; i++) {
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
 80007fc:	e063      	b.n	80008c6 <c_trans+0xe6>
		sin_arg = arm_sin_f32(omega*x_0+phi);
 80007fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8000802:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000806:	ee27 7a27 	vmul.f32	s14, s14, s15
 800080a:	edd7 7a02 	vldr	s15, [r7, #8]
 800080e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000812:	eeb0 0a67 	vmov.f32	s0, s15
 8000816:	f001 fad1 	bl	8001dbc <arm_sin_f32>
 800081a:	ed87 0a06 	vstr	s0, [r7, #24]
		cos_arg = arm_cos_f32(omega*x_0+phi);
 800081e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000822:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000826:	ee27 7a27 	vmul.f32	s14, s14, s15
 800082a:	edd7 7a02 	vldr	s15, [r7, #8]
 800082e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000832:	eeb0 0a67 	vmov.f32	s0, s15
 8000836:	f001 fb07 	bl	8001e48 <arm_cos_f32>
 800083a:	ed87 0a05 	vstr	s0, [r7, #20]
		// iteration step, this formula is computed using x_next = x_prev - f(x_prev)/f'(x_prev), according to the newton-raphson method
		x_0 = (x_0*x_0 + x_0*omega*sin_arg + cos_arg)/(2*x_0 + omega*sin_arg);
 800083e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000842:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000846:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800084a:	edd7 7a03 	vldr	s15, [r7, #12]
 800084e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000852:	edd7 7a06 	vldr	s15, [r7, #24]
 8000856:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800085a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800085e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000862:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000866:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800086a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800086e:	ed97 6a03 	vldr	s12, [r7, #12]
 8000872:	edd7 7a06 	vldr	s15, [r7, #24]
 8000876:	ee66 7a27 	vmul.f32	s15, s12, s15
 800087a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800087e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000882:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		// checking to see if we have stabilized at a value
		if (abs_f32(x_0-cur) <= MAX_TOLERANCE) {
 8000886:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800088a:	edd7 7a08 	vldr	s15, [r7, #32]
 800088e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000892:	eeb0 0a67 	vmov.f32	s0, s15
 8000896:	f000 f82b 	bl	80008f0 <abs_f32>
 800089a:	ee10 3a10 	vmov	r3, s0
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fe12 	bl	80004c8 <__aeabi_f2d>
 80008a4:	a30e      	add	r3, pc, #56	; (adr r3, 80008e0 <c_trans+0x100>)
 80008a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008aa:	f7ff fecf 	bl	800064c <__aeabi_dcmple>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d003      	beq.n	80008bc <c_trans+0xdc>
			(*pOut) = x_0;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008b8:	601a      	str	r2, [r3, #0]
			return;
 80008ba:	e00b      	b.n	80008d4 <c_trans+0xf4>
		}
		cur = x_0;
 80008bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008be:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < NUM_ITERATIONS; i++) {
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	3301      	adds	r3, #1
 80008c4:	61fb      	str	r3, [r7, #28]
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	2b3b      	cmp	r3, #59	; 0x3b
 80008ca:	dd98      	ble.n	80007fe <c_trans+0x1e>
	}
	// if we have not stabilized according to MAX_TOLERANCE, then we assume that some error has occured (e.g., no solutions), and we return 0.
	(*pOut) = 0;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f04f 0200 	mov.w	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
}
 80008d4:	3728      	adds	r7, #40	; 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	f3af 8000 	nop.w
 80008e0:	eb1c432d 	.word	0xeb1c432d
 80008e4:	3f1a36e2 	.word	0x3f1a36e2
 80008e8:	3dcccccd 	.word	0x3dcccccd
 80008ec:	bf800000 	.word	0xbf800000

080008f0 <abs_f32>:


/**
 * Returns the float32_t absolute value of the input
 */
float32_t abs_f32(float32_t val) {
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (val < 0) {
 80008fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80008fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000906:	d504      	bpl.n	8000912 <abs_f32+0x22>
		return -val;
 8000908:	edd7 7a01 	vldr	s15, [r7, #4]
 800090c:	eef1 7a67 	vneg.f32	s15, s15
 8000910:	e001      	b.n	8000916 <abs_f32+0x26>
	} else {
		return val;
 8000912:	edd7 7a01 	vldr	s15, [r7, #4]
	}
}
 8000916:	eeb0 0a67 	vmov.f32	s0, s15
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b5b0      	push	{r4, r5, r7, lr}
 8000926:	b096      	sub	sp, #88	; 0x58
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092a:	f000 f988 	bl	8000c3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800092e:	f000 f88d 	bl	8000a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000932:	f000 f8dd 	bl	8000af0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // define our variables and array
  float max = 0;
 8000936:	f04f 0300 	mov.w	r3, #0
 800093a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t maxIndex;
  // the max is 88.49 at index 5
  float array[10] = {48.21, 79.48, 24.27, 28.82, 78.24, 88.49, 31.19, 5.52, 82.70, 77.73};
 800093c:	4b40      	ldr	r3, [pc, #256]	; (8000a40 <main+0x11c>)
 800093e:	f107 040c 	add.w	r4, r7, #12
 8000942:	461d      	mov	r5, r3
 8000944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800094a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800094c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000950:	e884 0003 	stmia.w	r4, {r0, r1}

  // square root variables
  const float32_t num = -100;
 8000954:	4b3b      	ldr	r3, [pc, #236]	; (8000a44 <main+0x120>)
 8000956:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t result = 0;
 8000958:	f04f 0300 	mov.w	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]

  // transcendental variables
  const float32_t omega = 1;
 800095e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000962:	643b      	str	r3, [r7, #64]	; 0x40
  const float32_t phi = 1;
 8000964:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000968:	63fb      	str	r3, [r7, #60]	; 0x3c
*/

// Sqrt

	  // CMSIS-DSP implementation
	  ITM_Port32(31) = 7;
 800096a:	4b37      	ldr	r3, [pc, #220]	; (8000a48 <main+0x124>)
 800096c:	2207      	movs	r2, #7
 800096e:	601a      	str	r2, [r3, #0]
	  for (uint32_t i=0; i<1000; i++)
 8000970:	2300      	movs	r3, #0
 8000972:	657b      	str	r3, [r7, #84]	; 0x54
 8000974:	e01d      	b.n	80009b2 <main+0x8e>
 8000976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000978:	63bb      	str	r3, [r7, #56]	; 0x38
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000980:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000984:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800098c:	db09      	blt.n	80009a2 <main+0x7e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 800098e:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8000992:	f001 fad5 	bl	8001f40 <sqrtf>
 8000996:	eef0 7a40 	vmov.f32	s15, s0
 800099a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800099c:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 80009a0:	e004      	b.n	80009ac <main+0x88>
    }
    else
    {
      *pOut = 0.0f;
 80009a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a4:	f04f 0200 	mov.w	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80009aa:	bf00      	nop
 80009ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009ae:	3301      	adds	r3, #1
 80009b0:	657b      	str	r3, [r7, #84]	; 0x54
 80009b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009b8:	d3dd      	bcc.n	8000976 <main+0x52>
		  arm_sqrt_f32(num, &result);
	  ITM_Port32(31) = 8;
 80009ba:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <main+0x124>)
 80009bc:	2208      	movs	r2, #8
 80009be:	601a      	str	r2, [r3, #0]

	  // C implementation
	  ITM_Port32(31) = 9;
 80009c0:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <main+0x124>)
 80009c2:	2209      	movs	r2, #9
 80009c4:	601a      	str	r2, [r3, #0]
	  for (uint32_t i=0; i<1000; i++)
 80009c6:	2300      	movs	r3, #0
 80009c8:	653b      	str	r3, [r7, #80]	; 0x50
 80009ca:	e009      	b.n	80009e0 <main+0xbc>
		  c_sqrt(num, &result);
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	4618      	mov	r0, r3
 80009d2:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 80009d6:	f7ff fea9 	bl	800072c <c_sqrt>
	  for (uint32_t i=0; i<1000; i++)
 80009da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009dc:	3301      	adds	r3, #1
 80009de:	653b      	str	r3, [r7, #80]	; 0x50
 80009e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009e6:	d3f1      	bcc.n	80009cc <main+0xa8>
	  ITM_Port32(31) = 10;
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <main+0x124>)
 80009ea:	220a      	movs	r2, #10
 80009ec:	601a      	str	r2, [r3, #0]

	  // ARM implementation
	  ITM_Port32(31) = 11;
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <main+0x124>)
 80009f0:	220b      	movs	r2, #11
 80009f2:	601a      	str	r2, [r3, #0]
	  for (uint32_t i=0; i<1000; i++)
 80009f4:	2300      	movs	r3, #0
 80009f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80009f8:	e009      	b.n	8000a0e <main+0xea>
		  asmSqrt(num, &result);
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	4618      	mov	r0, r3
 8000a00:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 8000a04:	f7ff fe40 	bl	8000688 <asmSqrt>
	  for (uint32_t i=0; i<1000; i++)
 8000a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a14:	d3f1      	bcc.n	80009fa <main+0xd6>
	  ITM_Port32(31) = 12;
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <main+0x124>)
 8000a18:	220c      	movs	r2, #12
 8000a1a:	601a      	str	r2, [r3, #0]

// Transcendental

	  // ARM implementation
	  asmTranscendental(1, 2, &result_trans);
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4618      	mov	r0, r3
 8000a20:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000a24:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000a28:	f7ff fe3c 	bl	80006a4 <asmTranscendental>
	  c_trans(1, 2, &result_trans);
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	4618      	mov	r0, r3
 8000a30:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000a34:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000a38:	f7ff fed2 	bl	80007e0 <c_trans>
	  ITM_Port32(31) = 7;
 8000a3c:	e795      	b.n	800096a <main+0x46>
 8000a3e:	bf00      	nop
 8000a40:	08001f9c 	.word	0x08001f9c
 8000a44:	c2c80000 	.word	0xc2c80000
 8000a48:	e000007c 	.word	0xe000007c

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b096      	sub	sp, #88	; 0x58
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	2244      	movs	r2, #68	; 0x44
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 fa3e 	bl	8001edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a60:	463b      	mov	r3, r7
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f000 fa60 	bl	8000f34 <HAL_PWREx_ControlVoltageScaling>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000a7a:	f000 f851 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a7e:	2310      	movs	r3, #16
 8000a80:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a82:	2301      	movs	r3, #1
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a8a:	2360      	movs	r3, #96	; 0x60
 8000a8c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a92:	2301      	movs	r3, #1
 8000a94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a96:	2301      	movs	r3, #1
 8000a98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000a9a:	233c      	movs	r3, #60	; 0x3c
 8000a9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 fae4 	bl	800107c <HAL_RCC_OscConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000aba:	f000 f831 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abe:	230f      	movs	r3, #15
 8000ac0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	2105      	movs	r1, #5
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 feea 	bl	80018b0 <HAL_RCC_ClockConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ae2:	f000 f81d 	bl	8000b20 <Error_Handler>
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	3758      	adds	r7, #88	; 0x58
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_GPIO_Init+0x2c>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <MX_GPIO_Init+0x2c>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_GPIO_Init+0x2c>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <HAL_MspInit+0x44>)
 8000b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b36:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <HAL_MspInit+0x44>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <HAL_MspInit+0x44>)
 8000b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_MspInit+0x44>)
 8000b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <HAL_MspInit+0x44>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b54:	6593      	str	r3, [r2, #88]	; 0x58
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_MspInit+0x44>)
 8000b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler+0x4>

08000b86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc0:	f000 f892 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <SystemInit+0x20>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <SystemInit+0x20>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf0:	f7ff ffea 	bl	8000bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf4:	480c      	ldr	r0, [pc, #48]	; (8000c28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf6:	490d      	ldr	r1, [pc, #52]	; (8000c2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <LoopForever+0xe>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	; (8000c38 <LoopForever+0x16>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f001 f96d 	bl	8001ef8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c1e:	f7ff fe81 	bl	8000924 <main>

08000c22 <LoopForever>:

LoopForever:
    b LoopForever
 8000c22:	e7fe      	b.n	8000c22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c24:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c30:	08002810 	.word	0x08002810
  ldr r2, =_sbss
 8000c34:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c38:	200001b4 	.word	0x200001b4

08000c3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC1_IRQHandler>

08000c3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c44:	2300      	movs	r3, #0
 8000c46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 f91f 	bl	8000e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f000 f80e 	bl	8000c70 <HAL_InitTick>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d002      	beq.n	8000c60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	71fb      	strb	r3, [r7, #7]
 8000c5e:	e001      	b.n	8000c64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c60:	f7ff ff64 	bl	8000b2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c64:	79fb      	ldrb	r3, [r7, #7]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HAL_InitTick+0x6c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d023      	beq.n	8000ccc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c84:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <HAL_InitTick+0x70>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_InitTick+0x6c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f91d 	bl	8000eda <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10f      	bne.n	8000cc6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b0f      	cmp	r3, #15
 8000caa:	d809      	bhi.n	8000cc0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cac:	2200      	movs	r2, #0
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f000 f8f5 	bl	8000ea2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <HAL_InitTick+0x74>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	e007      	b.n	8000cd0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
 8000cc4:	e004      	b.n	8000cd0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	73fb      	strb	r3, [r7, #15]
 8000cca:	e001      	b.n	8000cd0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000078 	.word	0x20000078

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000078 	.word	0x20000078

08000d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d44:	4013      	ands	r3, r2
 8000d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	60d3      	str	r3, [r2, #12]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <__NVIC_GetPriorityGrouping+0x18>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	f003 0307 	and.w	r3, r3, #7
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	db0a      	blt.n	8000db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	490c      	ldr	r1, [pc, #48]	; (8000dd8 <__NVIC_SetPriority+0x4c>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	0112      	lsls	r2, r2, #4
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	440b      	add	r3, r1
 8000db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db4:	e00a      	b.n	8000dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4908      	ldr	r1, [pc, #32]	; (8000ddc <__NVIC_SetPriority+0x50>)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	3b04      	subs	r3, #4
 8000dc4:	0112      	lsls	r2, r2, #4
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	440b      	add	r3, r1
 8000dca:	761a      	strb	r2, [r3, #24]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000e100 	.word	0xe000e100
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f1c3 0307 	rsb	r3, r3, #7
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	bf28      	it	cs
 8000dfe:	2304      	movcs	r3, #4
 8000e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3304      	adds	r3, #4
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d902      	bls.n	8000e10 <NVIC_EncodePriority+0x30>
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3b03      	subs	r3, #3
 8000e0e:	e000      	b.n	8000e12 <NVIC_EncodePriority+0x32>
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	401a      	ands	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43d9      	mvns	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	4313      	orrs	r3, r2
         );
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3724      	adds	r7, #36	; 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e58:	d301      	bcc.n	8000e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00f      	b.n	8000e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <SysTick_Config+0x40>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e66:	210f      	movs	r1, #15
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f7ff ff8e 	bl	8000d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <SysTick_Config+0x40>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <SysTick_Config+0x40>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	e000e010 	.word	0xe000e010

08000e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ff47 	bl	8000d28 <__NVIC_SetPriorityGrouping>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb4:	f7ff ff5c 	bl	8000d70 <__NVIC_GetPriorityGrouping>
 8000eb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	6978      	ldr	r0, [r7, #20]
 8000ec0:	f7ff ff8e 	bl	8000de0 <NVIC_EncodePriority>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff5d 	bl	8000d8c <__NVIC_SetPriority>
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ffb0 	bl	8000e48 <SysTick_Config>
 8000ee8:	4603      	mov	r3, r0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ef8:	4b0d      	ldr	r3, [pc, #52]	; (8000f30 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f04:	d102      	bne.n	8000f0c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f0a:	e00b      	b.n	8000f24 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f1a:	d102      	bne.n	8000f22 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f20:	e000      	b.n	8000f24 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000f22:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40007000 	.word	0x40007000

08000f34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d141      	bne.n	8000fc6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f42:	4b4b      	ldr	r3, [pc, #300]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f4e:	d131      	bne.n	8000fb4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f50:	4b47      	ldr	r3, [pc, #284]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f56:	4a46      	ldr	r2, [pc, #280]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f60:	4b43      	ldr	r3, [pc, #268]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f68:	4a41      	ldr	r2, [pc, #260]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000f70:	4b40      	ldr	r3, [pc, #256]	; (8001074 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2232      	movs	r2, #50	; 0x32
 8000f76:	fb02 f303 	mul.w	r3, r2, r3
 8000f7a:	4a3f      	ldr	r2, [pc, #252]	; (8001078 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f80:	0c9b      	lsrs	r3, r3, #18
 8000f82:	3301      	adds	r3, #1
 8000f84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f86:	e002      	b.n	8000f8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f8e:	4b38      	ldr	r3, [pc, #224]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f9a:	d102      	bne.n	8000fa2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f2      	bne.n	8000f88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fa2:	4b33      	ldr	r3, [pc, #204]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fae:	d158      	bne.n	8001062 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e057      	b.n	8001064 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fb4:	4b2e      	ldr	r3, [pc, #184]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fba:	4a2d      	ldr	r2, [pc, #180]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000fc4:	e04d      	b.n	8001062 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fcc:	d141      	bne.n	8001052 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fce:	4b28      	ldr	r3, [pc, #160]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fda:	d131      	bne.n	8001040 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fdc:	4b24      	ldr	r3, [pc, #144]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fe2:	4a23      	ldr	r2, [pc, #140]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fec:	4b20      	ldr	r3, [pc, #128]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ff4:	4a1e      	ldr	r2, [pc, #120]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ffa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000ffc:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2232      	movs	r2, #50	; 0x32
 8001002:	fb02 f303 	mul.w	r3, r2, r3
 8001006:	4a1c      	ldr	r2, [pc, #112]	; (8001078 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001008:	fba2 2303 	umull	r2, r3, r2, r3
 800100c:	0c9b      	lsrs	r3, r3, #18
 800100e:	3301      	adds	r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001012:	e002      	b.n	800101a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	3b01      	subs	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001026:	d102      	bne.n	800102e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f2      	bne.n	8001014 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800103a:	d112      	bne.n	8001062 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e011      	b.n	8001064 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001050:	e007      	b.n	8001062 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800105c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001060:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	40007000 	.word	0x40007000
 8001074:	20000000 	.word	0x20000000
 8001078:	431bde83 	.word	0x431bde83

0800107c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d102      	bne.n	8001090 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	f000 bc08 	b.w	80018a0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001090:	4b96      	ldr	r3, [pc, #600]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f003 030c 	and.w	r3, r3, #12
 8001098:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800109a:	4b94      	ldr	r3, [pc, #592]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0310 	and.w	r3, r3, #16
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 80e4 	beq.w	800127a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d007      	beq.n	80010c8 <HAL_RCC_OscConfig+0x4c>
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	2b0c      	cmp	r3, #12
 80010bc:	f040 808b 	bne.w	80011d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	f040 8087 	bne.w	80011d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010c8:	4b88      	ldr	r3, [pc, #544]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0302 	and.w	r3, r3, #2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d005      	beq.n	80010e0 <HAL_RCC_OscConfig+0x64>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e3df      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a1a      	ldr	r2, [r3, #32]
 80010e4:	4b81      	ldr	r3, [pc, #516]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d004      	beq.n	80010fa <HAL_RCC_OscConfig+0x7e>
 80010f0:	4b7e      	ldr	r3, [pc, #504]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010f8:	e005      	b.n	8001106 <HAL_RCC_OscConfig+0x8a>
 80010fa:	4b7c      	ldr	r3, [pc, #496]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 80010fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001100:	091b      	lsrs	r3, r3, #4
 8001102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001106:	4293      	cmp	r3, r2
 8001108:	d223      	bcs.n	8001152 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	4618      	mov	r0, r3
 8001110:	f000 fd94 	bl	8001c3c <RCC_SetFlashLatencyFromMSIRange>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e3c0      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800111e:	4b73      	ldr	r3, [pc, #460]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a72      	ldr	r2, [pc, #456]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	4b70      	ldr	r3, [pc, #448]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	496d      	ldr	r1, [pc, #436]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 8001138:	4313      	orrs	r3, r2
 800113a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800113c:	4b6b      	ldr	r3, [pc, #428]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69db      	ldr	r3, [r3, #28]
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	4968      	ldr	r1, [pc, #416]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 800114c:	4313      	orrs	r3, r2
 800114e:	604b      	str	r3, [r1, #4]
 8001150:	e025      	b.n	800119e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001152:	4b66      	ldr	r3, [pc, #408]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a65      	ldr	r2, [pc, #404]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 8001158:	f043 0308 	orr.w	r3, r3, #8
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	4b63      	ldr	r3, [pc, #396]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	4960      	ldr	r1, [pc, #384]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 800116c:	4313      	orrs	r3, r2
 800116e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001170:	4b5e      	ldr	r3, [pc, #376]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	495b      	ldr	r1, [pc, #364]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 8001180:	4313      	orrs	r3, r2
 8001182:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d109      	bne.n	800119e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	4618      	mov	r0, r3
 8001190:	f000 fd54 	bl	8001c3c <RCC_SetFlashLatencyFromMSIRange>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e380      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800119e:	f000 fcc1 	bl	8001b24 <HAL_RCC_GetSysClockFreq>
 80011a2:	4602      	mov	r2, r0
 80011a4:	4b51      	ldr	r3, [pc, #324]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	091b      	lsrs	r3, r3, #4
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	4950      	ldr	r1, [pc, #320]	; (80012f0 <HAL_RCC_OscConfig+0x274>)
 80011b0:	5ccb      	ldrb	r3, [r1, r3]
 80011b2:	f003 031f 	and.w	r3, r3, #31
 80011b6:	fa22 f303 	lsr.w	r3, r2, r3
 80011ba:	4a4e      	ldr	r2, [pc, #312]	; (80012f4 <HAL_RCC_OscConfig+0x278>)
 80011bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80011be:	4b4e      	ldr	r3, [pc, #312]	; (80012f8 <HAL_RCC_OscConfig+0x27c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fd54 	bl	8000c70 <HAL_InitTick>
 80011c8:	4603      	mov	r3, r0
 80011ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d052      	beq.n	8001278 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	e364      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d032      	beq.n	8001244 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011de:	4b43      	ldr	r3, [pc, #268]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a42      	ldr	r2, [pc, #264]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011ea:	f7ff fd91 	bl	8000d10 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011f2:	f7ff fd8d 	bl	8000d10 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e34d      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001204:	4b39      	ldr	r3, [pc, #228]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f0      	beq.n	80011f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001210:	4b36      	ldr	r3, [pc, #216]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a35      	ldr	r2, [pc, #212]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 8001216:	f043 0308 	orr.w	r3, r3, #8
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	4b33      	ldr	r3, [pc, #204]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	4930      	ldr	r1, [pc, #192]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 800122a:	4313      	orrs	r3, r2
 800122c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800122e:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	492b      	ldr	r1, [pc, #172]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 800123e:	4313      	orrs	r3, r2
 8001240:	604b      	str	r3, [r1, #4]
 8001242:	e01a      	b.n	800127a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001244:	4b29      	ldr	r3, [pc, #164]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a28      	ldr	r2, [pc, #160]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 800124a:	f023 0301 	bic.w	r3, r3, #1
 800124e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001250:	f7ff fd5e 	bl	8000d10 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001258:	f7ff fd5a 	bl	8000d10 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e31a      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x1dc>
 8001276:	e000      	b.n	800127a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001278:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d073      	beq.n	800136e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	2b08      	cmp	r3, #8
 800128a:	d005      	beq.n	8001298 <HAL_RCC_OscConfig+0x21c>
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	2b0c      	cmp	r3, #12
 8001290:	d10e      	bne.n	80012b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2b03      	cmp	r3, #3
 8001296:	d10b      	bne.n	80012b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d063      	beq.n	800136c <HAL_RCC_OscConfig+0x2f0>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d15f      	bne.n	800136c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e2f7      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b8:	d106      	bne.n	80012c8 <HAL_RCC_OscConfig+0x24c>
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e025      	b.n	8001314 <HAL_RCC_OscConfig+0x298>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d0:	d114      	bne.n	80012fc <HAL_RCC_OscConfig+0x280>
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 80012d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	4b03      	ldr	r3, [pc, #12]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a02      	ldr	r2, [pc, #8]	; (80012ec <HAL_RCC_OscConfig+0x270>)
 80012e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e013      	b.n	8001314 <HAL_RCC_OscConfig+0x298>
 80012ec:	40021000 	.word	0x40021000
 80012f0:	08001fc4 	.word	0x08001fc4
 80012f4:	20000000 	.word	0x20000000
 80012f8:	20000004 	.word	0x20000004
 80012fc:	4ba0      	ldr	r3, [pc, #640]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a9f      	ldr	r2, [pc, #636]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 8001302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4b9d      	ldr	r3, [pc, #628]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a9c      	ldr	r2, [pc, #624]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 800130e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d013      	beq.n	8001344 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131c:	f7ff fcf8 	bl	8000d10 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001324:	f7ff fcf4 	bl	8000d10 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b64      	cmp	r3, #100	; 0x64
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e2b4      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001336:	4b92      	ldr	r3, [pc, #584]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0x2a8>
 8001342:	e014      	b.n	800136e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001344:	f7ff fce4 	bl	8000d10 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800134c:	f7ff fce0 	bl	8000d10 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b64      	cmp	r3, #100	; 0x64
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e2a0      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800135e:	4b88      	ldr	r3, [pc, #544]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f0      	bne.n	800134c <HAL_RCC_OscConfig+0x2d0>
 800136a:	e000      	b.n	800136e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d060      	beq.n	800143c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	2b04      	cmp	r3, #4
 800137e:	d005      	beq.n	800138c <HAL_RCC_OscConfig+0x310>
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2b0c      	cmp	r3, #12
 8001384:	d119      	bne.n	80013ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d116      	bne.n	80013ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800138c:	4b7c      	ldr	r3, [pc, #496]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001394:	2b00      	cmp	r3, #0
 8001396:	d005      	beq.n	80013a4 <HAL_RCC_OscConfig+0x328>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e27d      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a4:	4b76      	ldr	r3, [pc, #472]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	061b      	lsls	r3, r3, #24
 80013b2:	4973      	ldr	r1, [pc, #460]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013b8:	e040      	b.n	800143c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d023      	beq.n	800140a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c2:	4b6f      	ldr	r3, [pc, #444]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a6e      	ldr	r2, [pc, #440]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 80013c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ce:	f7ff fc9f 	bl	8000d10 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d6:	f7ff fc9b 	bl	8000d10 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e25b      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013e8:	4b65      	ldr	r3, [pc, #404]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0f0      	beq.n	80013d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f4:	4b62      	ldr	r3, [pc, #392]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	061b      	lsls	r3, r3, #24
 8001402:	495f      	ldr	r1, [pc, #380]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 8001404:	4313      	orrs	r3, r2
 8001406:	604b      	str	r3, [r1, #4]
 8001408:	e018      	b.n	800143c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800140a:	4b5d      	ldr	r3, [pc, #372]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a5c      	ldr	r2, [pc, #368]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 8001410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001416:	f7ff fc7b 	bl	8000d10 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800141e:	f7ff fc77 	bl	8000d10 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e237      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001430:	4b53      	ldr	r3, [pc, #332]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f0      	bne.n	800141e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	2b00      	cmp	r3, #0
 8001446:	d03c      	beq.n	80014c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d01c      	beq.n	800148a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001450:	4b4b      	ldr	r3, [pc, #300]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 8001452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001456:	4a4a      	ldr	r2, [pc, #296]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001460:	f7ff fc56 	bl	8000d10 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001468:	f7ff fc52 	bl	8000d10 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e212      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800147a:	4b41      	ldr	r3, [pc, #260]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 800147c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0ef      	beq.n	8001468 <HAL_RCC_OscConfig+0x3ec>
 8001488:	e01b      	b.n	80014c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800148a:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 800148c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001490:	4a3b      	ldr	r2, [pc, #236]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 8001492:	f023 0301 	bic.w	r3, r3, #1
 8001496:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149a:	f7ff fc39 	bl	8000d10 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a2:	f7ff fc35 	bl	8000d10 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e1f5      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014b4:	4b32      	ldr	r3, [pc, #200]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 80014b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1ef      	bne.n	80014a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 80a6 	beq.w	800161c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014d4:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 80014d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d10d      	bne.n	80014fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 80014e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e4:	4a26      	ldr	r2, [pc, #152]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 80014e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ea:	6593      	str	r3, [r2, #88]	; 0x58
 80014ec:	4b24      	ldr	r3, [pc, #144]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 80014ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014f8:	2301      	movs	r3, #1
 80014fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014fc:	4b21      	ldr	r3, [pc, #132]	; (8001584 <HAL_RCC_OscConfig+0x508>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001504:	2b00      	cmp	r3, #0
 8001506:	d118      	bne.n	800153a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <HAL_RCC_OscConfig+0x508>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a1d      	ldr	r2, [pc, #116]	; (8001584 <HAL_RCC_OscConfig+0x508>)
 800150e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001512:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001514:	f7ff fbfc 	bl	8000d10 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151c:	f7ff fbf8 	bl	8000d10 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e1b8      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <HAL_RCC_OscConfig+0x508>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d108      	bne.n	8001554 <HAL_RCC_OscConfig+0x4d8>
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 8001544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001548:	4a0d      	ldr	r2, [pc, #52]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001552:	e029      	b.n	80015a8 <HAL_RCC_OscConfig+0x52c>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b05      	cmp	r3, #5
 800155a:	d115      	bne.n	8001588 <HAL_RCC_OscConfig+0x50c>
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 800155e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001562:	4a07      	ldr	r2, [pc, #28]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 800156e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001572:	4a03      	ldr	r2, [pc, #12]	; (8001580 <HAL_RCC_OscConfig+0x504>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800157c:	e014      	b.n	80015a8 <HAL_RCC_OscConfig+0x52c>
 800157e:	bf00      	nop
 8001580:	40021000 	.word	0x40021000
 8001584:	40007000 	.word	0x40007000
 8001588:	4b9d      	ldr	r3, [pc, #628]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 800158a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800158e:	4a9c      	ldr	r2, [pc, #624]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 8001590:	f023 0301 	bic.w	r3, r3, #1
 8001594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001598:	4b99      	ldr	r3, [pc, #612]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 800159a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800159e:	4a98      	ldr	r2, [pc, #608]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 80015a0:	f023 0304 	bic.w	r3, r3, #4
 80015a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d016      	beq.n	80015de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b0:	f7ff fbae 	bl	8000d10 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015b6:	e00a      	b.n	80015ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b8:	f7ff fbaa 	bl	8000d10 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e168      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015ce:	4b8c      	ldr	r3, [pc, #560]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 80015d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0ed      	beq.n	80015b8 <HAL_RCC_OscConfig+0x53c>
 80015dc:	e015      	b.n	800160a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015de:	f7ff fb97 	bl	8000d10 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015e4:	e00a      	b.n	80015fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e6:	f7ff fb93 	bl	8000d10 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e151      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015fc:	4b80      	ldr	r3, [pc, #512]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 80015fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1ed      	bne.n	80015e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800160a:	7ffb      	ldrb	r3, [r7, #31]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d105      	bne.n	800161c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001610:	4b7b      	ldr	r3, [pc, #492]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 8001612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001614:	4a7a      	ldr	r2, [pc, #488]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 8001616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800161a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0320 	and.w	r3, r3, #32
 8001624:	2b00      	cmp	r3, #0
 8001626:	d03c      	beq.n	80016a2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	2b00      	cmp	r3, #0
 800162e:	d01c      	beq.n	800166a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001630:	4b73      	ldr	r3, [pc, #460]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 8001632:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001636:	4a72      	ldr	r2, [pc, #456]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001640:	f7ff fb66 	bl	8000d10 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001648:	f7ff fb62 	bl	8000d10 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e122      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800165a:	4b69      	ldr	r3, [pc, #420]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 800165c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0ef      	beq.n	8001648 <HAL_RCC_OscConfig+0x5cc>
 8001668:	e01b      	b.n	80016a2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800166a:	4b65      	ldr	r3, [pc, #404]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 800166c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001670:	4a63      	ldr	r2, [pc, #396]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 8001672:	f023 0301 	bic.w	r3, r3, #1
 8001676:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167a:	f7ff fb49 	bl	8000d10 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001682:	f7ff fb45 	bl	8000d10 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e105      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001694:	4b5a      	ldr	r3, [pc, #360]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 8001696:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1ef      	bne.n	8001682 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 80f9 	beq.w	800189e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	f040 80cf 	bne.w	8001854 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80016b6:	4b52      	ldr	r3, [pc, #328]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	f003 0203 	and.w	r2, r3, #3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d12c      	bne.n	8001724 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	3b01      	subs	r3, #1
 80016d6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d123      	bne.n	8001724 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d11b      	bne.n	8001724 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d113      	bne.n	8001724 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001706:	085b      	lsrs	r3, r3, #1
 8001708:	3b01      	subs	r3, #1
 800170a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d109      	bne.n	8001724 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	085b      	lsrs	r3, r3, #1
 800171c:	3b01      	subs	r3, #1
 800171e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001720:	429a      	cmp	r2, r3
 8001722:	d071      	beq.n	8001808 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d068      	beq.n	80017fc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800172a:	4b35      	ldr	r3, [pc, #212]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d105      	bne.n	8001742 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001736:	4b32      	ldr	r3, [pc, #200]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e0ac      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001746:	4b2e      	ldr	r3, [pc, #184]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a2d      	ldr	r2, [pc, #180]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 800174c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001750:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001752:	f7ff fadd 	bl	8000d10 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175a:	f7ff fad9 	bl	8000d10 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e099      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800176c:	4b24      	ldr	r3, [pc, #144]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f0      	bne.n	800175a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001778:	4b21      	ldr	r3, [pc, #132]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <HAL_RCC_OscConfig+0x788>)
 800177e:	4013      	ands	r3, r2
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001788:	3a01      	subs	r2, #1
 800178a:	0112      	lsls	r2, r2, #4
 800178c:	4311      	orrs	r1, r2
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001792:	0212      	lsls	r2, r2, #8
 8001794:	4311      	orrs	r1, r2
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800179a:	0852      	lsrs	r2, r2, #1
 800179c:	3a01      	subs	r2, #1
 800179e:	0552      	lsls	r2, r2, #21
 80017a0:	4311      	orrs	r1, r2
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017a6:	0852      	lsrs	r2, r2, #1
 80017a8:	3a01      	subs	r2, #1
 80017aa:	0652      	lsls	r2, r2, #25
 80017ac:	4311      	orrs	r1, r2
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017b2:	06d2      	lsls	r2, r2, #27
 80017b4:	430a      	orrs	r2, r1
 80017b6:	4912      	ldr	r1, [pc, #72]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80017bc:	4b10      	ldr	r3, [pc, #64]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0f      	ldr	r2, [pc, #60]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 80017c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017c8:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 80017ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017d4:	f7ff fa9c 	bl	8000d10 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017dc:	f7ff fa98 	bl	8000d10 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e058      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <HAL_RCC_OscConfig+0x784>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017fa:	e050      	b.n	800189e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e04f      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
 8001800:	40021000 	.word	0x40021000
 8001804:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001808:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <HAL_RCC_OscConfig+0x82c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d144      	bne.n	800189e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001814:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <HAL_RCC_OscConfig+0x82c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a23      	ldr	r2, [pc, #140]	; (80018a8 <HAL_RCC_OscConfig+0x82c>)
 800181a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800181e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001820:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <HAL_RCC_OscConfig+0x82c>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4a20      	ldr	r2, [pc, #128]	; (80018a8 <HAL_RCC_OscConfig+0x82c>)
 8001826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800182a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800182c:	f7ff fa70 	bl	8000d10 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff fa6c 	bl	8000d10 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e02c      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001846:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <HAL_RCC_OscConfig+0x82c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x7b8>
 8001852:	e024      	b.n	800189e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	2b0c      	cmp	r3, #12
 8001858:	d01f      	beq.n	800189a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <HAL_RCC_OscConfig+0x82c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <HAL_RCC_OscConfig+0x82c>)
 8001860:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001866:	f7ff fa53 	bl	8000d10 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186e:	f7ff fa4f 	bl	8000d10 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e00f      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_RCC_OscConfig+0x82c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f0      	bne.n	800186e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_RCC_OscConfig+0x82c>)
 800188e:	68da      	ldr	r2, [r3, #12]
 8001890:	4905      	ldr	r1, [pc, #20]	; (80018a8 <HAL_RCC_OscConfig+0x82c>)
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_RCC_OscConfig+0x830>)
 8001894:	4013      	ands	r3, r2
 8001896:	60cb      	str	r3, [r1, #12]
 8001898:	e001      	b.n	800189e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3720      	adds	r7, #32
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40021000 	.word	0x40021000
 80018ac:	feeefffc 	.word	0xfeeefffc

080018b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e11d      	b.n	8001b04 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018c8:	4b90      	ldr	r3, [pc, #576]	; (8001b0c <HAL_RCC_ClockConfig+0x25c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d910      	bls.n	80018f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d6:	4b8d      	ldr	r3, [pc, #564]	; (8001b0c <HAL_RCC_ClockConfig+0x25c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 020f 	bic.w	r2, r3, #15
 80018de:	498b      	ldr	r1, [pc, #556]	; (8001b0c <HAL_RCC_ClockConfig+0x25c>)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	4b89      	ldr	r3, [pc, #548]	; (8001b0c <HAL_RCC_ClockConfig+0x25c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e105      	b.n	8001b04 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d010      	beq.n	8001926 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	4b81      	ldr	r3, [pc, #516]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001910:	429a      	cmp	r2, r3
 8001912:	d908      	bls.n	8001926 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001914:	4b7e      	ldr	r3, [pc, #504]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	497b      	ldr	r1, [pc, #492]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d079      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b03      	cmp	r3, #3
 8001938:	d11e      	bne.n	8001978 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193a:	4b75      	ldr	r3, [pc, #468]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e0dc      	b.n	8001b04 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800194a:	f000 f9d1 	bl	8001cf0 <RCC_GetSysClockFreqFromPLLSource>
 800194e:	4603      	mov	r3, r0
 8001950:	4a70      	ldr	r2, [pc, #448]	; (8001b14 <HAL_RCC_ClockConfig+0x264>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d946      	bls.n	80019e4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001956:	4b6e      	ldr	r3, [pc, #440]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d140      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001962:	4b6b      	ldr	r3, [pc, #428]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800196a:	4a69      	ldr	r2, [pc, #420]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 800196c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001970:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	e035      	b.n	80019e4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d107      	bne.n	8001990 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001980:	4b63      	ldr	r3, [pc, #396]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d115      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0b9      	b.n	8001b04 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d107      	bne.n	80019a8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001998:	4b5d      	ldr	r3, [pc, #372]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d109      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0ad      	b.n	8001b04 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a8:	4b59      	ldr	r3, [pc, #356]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0a5      	b.n	8001b04 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80019b8:	f000 f8b4 	bl	8001b24 <HAL_RCC_GetSysClockFreq>
 80019bc:	4603      	mov	r3, r0
 80019be:	4a55      	ldr	r2, [pc, #340]	; (8001b14 <HAL_RCC_ClockConfig+0x264>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d90f      	bls.n	80019e4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80019c4:	4b52      	ldr	r3, [pc, #328]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d109      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019d0:	4b4f      	ldr	r3, [pc, #316]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019d8:	4a4d      	ldr	r2, [pc, #308]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 80019da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019de:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019e4:	4b4a      	ldr	r3, [pc, #296]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f023 0203 	bic.w	r2, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4947      	ldr	r1, [pc, #284]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019f6:	f7ff f98b 	bl	8000d10 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fc:	e00a      	b.n	8001a14 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fe:	f7ff f987 	bl	8000d10 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e077      	b.n	8001b04 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a14:	4b3e      	ldr	r3, [pc, #248]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 020c 	and.w	r2, r3, #12
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d1eb      	bne.n	80019fe <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2b80      	cmp	r3, #128	; 0x80
 8001a2a:	d105      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a2c:	4b38      	ldr	r3, [pc, #224]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	4a37      	ldr	r2, [pc, #220]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 8001a32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a36:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d010      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	4b31      	ldr	r3, [pc, #196]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d208      	bcs.n	8001a66 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a54:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	492b      	ldr	r1, [pc, #172]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a66:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <HAL_RCC_ClockConfig+0x25c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d210      	bcs.n	8001a96 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a74:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <HAL_RCC_ClockConfig+0x25c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 020f 	bic.w	r2, r3, #15
 8001a7c:	4923      	ldr	r1, [pc, #140]	; (8001b0c <HAL_RCC_ClockConfig+0x25c>)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a84:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <HAL_RCC_ClockConfig+0x25c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 030f 	and.w	r3, r3, #15
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d001      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e036      	b.n	8001b04 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d008      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	4918      	ldr	r1, [pc, #96]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d009      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ac0:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4910      	ldr	r1, [pc, #64]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ad4:	f000 f826 	bl	8001b24 <HAL_RCC_GetSysClockFreq>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <HAL_RCC_ClockConfig+0x260>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	091b      	lsrs	r3, r3, #4
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	490c      	ldr	r1, [pc, #48]	; (8001b18 <HAL_RCC_ClockConfig+0x268>)
 8001ae6:	5ccb      	ldrb	r3, [r1, r3]
 8001ae8:	f003 031f 	and.w	r3, r3, #31
 8001aec:	fa22 f303 	lsr.w	r3, r2, r3
 8001af0:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <HAL_RCC_ClockConfig+0x26c>)
 8001af2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <HAL_RCC_ClockConfig+0x270>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff f8b9 	bl	8000c70 <HAL_InitTick>
 8001afe:	4603      	mov	r3, r0
 8001b00:	73fb      	strb	r3, [r7, #15]

  return status;
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40022000 	.word	0x40022000
 8001b10:	40021000 	.word	0x40021000
 8001b14:	04c4b400 	.word	0x04c4b400
 8001b18:	08001fc4 	.word	0x08001fc4
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	20000004 	.word	0x20000004

08001b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b32:	4b3e      	ldr	r3, [pc, #248]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 030c 	and.w	r3, r3, #12
 8001b3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b3c:	4b3b      	ldr	r3, [pc, #236]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0x34>
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	2b0c      	cmp	r3, #12
 8001b50:	d121      	bne.n	8001b96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d11e      	bne.n	8001b96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b58:	4b34      	ldr	r3, [pc, #208]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d107      	bne.n	8001b74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b64:	4b31      	ldr	r3, [pc, #196]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b6a:	0a1b      	lsrs	r3, r3, #8
 8001b6c:	f003 030f 	and.w	r3, r3, #15
 8001b70:	61fb      	str	r3, [r7, #28]
 8001b72:	e005      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b74:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b80:	4a2b      	ldr	r2, [pc, #172]	; (8001c30 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10d      	bne.n	8001bac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b94:	e00a      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d102      	bne.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b9c:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b9e:	61bb      	str	r3, [r7, #24]
 8001ba0:	e004      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d101      	bne.n	8001bac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ba8:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x114>)
 8001baa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	2b0c      	cmp	r3, #12
 8001bb0:	d134      	bne.n	8001c1c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d003      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0xa6>
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d003      	beq.n	8001bd0 <HAL_RCC_GetSysClockFreq+0xac>
 8001bc8:	e005      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bcc:	617b      	str	r3, [r7, #20]
      break;
 8001bce:	e005      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bd0:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bd2:	617b      	str	r3, [r7, #20]
      break;
 8001bd4:	e002      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	617b      	str	r3, [r7, #20]
      break;
 8001bda:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	3301      	adds	r3, #1
 8001be8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	0a1b      	lsrs	r3, r3, #8
 8001bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	fb03 f202 	mul.w	r2, r3, r2
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c00:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	0e5b      	lsrs	r3, r3, #25
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c12:	697a      	ldr	r2, [r7, #20]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c1c:	69bb      	ldr	r3, [r7, #24]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3724      	adds	r7, #36	; 0x24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	08001fd4 	.word	0x08001fd4
 8001c34:	00f42400 	.word	0x00f42400
 8001c38:	007a1200 	.word	0x007a1200

08001c3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c48:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c54:	f7ff f94e 	bl	8000ef4 <HAL_PWREx_GetVoltageRange>
 8001c58:	6178      	str	r0, [r7, #20]
 8001c5a:	e014      	b.n	8001c86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c5c:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c60:	4a21      	ldr	r2, [pc, #132]	; (8001ce8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c66:	6593      	str	r3, [r2, #88]	; 0x58
 8001c68:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c74:	f7ff f93e 	bl	8000ef4 <HAL_PWREx_GetVoltageRange>
 8001c78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7e:	4a1a      	ldr	r2, [pc, #104]	; (8001ce8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c8c:	d10b      	bne.n	8001ca6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b80      	cmp	r3, #128	; 0x80
 8001c92:	d913      	bls.n	8001cbc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2ba0      	cmp	r3, #160	; 0xa0
 8001c98:	d902      	bls.n	8001ca0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	e00d      	b.n	8001cbc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	e00a      	b.n	8001cbc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b7f      	cmp	r3, #127	; 0x7f
 8001caa:	d902      	bls.n	8001cb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001cac:	2302      	movs	r3, #2
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	e004      	b.n	8001cbc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b70      	cmp	r3, #112	; 0x70
 8001cb6:	d101      	bne.n	8001cbc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cb8:	2301      	movs	r3, #1
 8001cba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f023 020f 	bic.w	r2, r3, #15
 8001cc4:	4909      	ldr	r1, [pc, #36]	; (8001cec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d001      	beq.n	8001cde <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	40022000 	.word	0x40022000

08001cf0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cf6:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d00b      	beq.n	8001d1e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d825      	bhi.n	8001d58 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d008      	beq.n	8001d24 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d11f      	bne.n	8001d58 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001d18:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001d1a:	613b      	str	r3, [r7, #16]
    break;
 8001d1c:	e01f      	b.n	8001d5e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001d1e:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001d20:	613b      	str	r3, [r7, #16]
    break;
 8001d22:	e01c      	b.n	8001d5e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d24:	4b21      	ldr	r3, [pc, #132]	; (8001dac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d107      	bne.n	8001d40 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d30:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	e005      	b.n	8001d4c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d40:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001d4c:	4a1a      	ldr	r2, [pc, #104]	; (8001db8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d54:	613b      	str	r3, [r7, #16]
    break;
 8001d56:	e002      	b.n	8001d5e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	613b      	str	r3, [r7, #16]
    break;
 8001d5c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d5e:	4b13      	ldr	r3, [pc, #76]	; (8001dac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	3301      	adds	r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	fb03 f202 	mul.w	r2, r3, r2
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d82:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	0e5b      	lsrs	r3, r3, #25
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001d9e:	683b      	ldr	r3, [r7, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	371c      	adds	r7, #28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	40021000 	.word	0x40021000
 8001db0:	00f42400 	.word	0x00f42400
 8001db4:	007a1200 	.word	0x007a1200
 8001db8:	08001fd4 	.word	0x08001fd4

08001dbc <arm_sin_f32>:
 8001dbc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8001e3c <arm_sin_f32+0x80>
 8001dc0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001dc4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dcc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8001dd0:	d504      	bpl.n	8001ddc <arm_sin_f32+0x20>
 8001dd2:	ee17 3a90 	vmov	r3, s15
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	ee07 3a90 	vmov	s15, r3
 8001ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001e40 <arm_sin_f32+0x84>
 8001de4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001de8:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001dec:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8001df0:	ee17 3a90 	vmov	r3, s15
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dfa:	d21a      	bcs.n	8001e32 <arm_sin_f32+0x76>
 8001dfc:	ee07 3a90 	vmov	s15, r3
 8001e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e04:	1c59      	adds	r1, r3, #1
 8001e06:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001e0a:	4a0e      	ldr	r2, [pc, #56]	; (8001e44 <arm_sin_f32+0x88>)
 8001e0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001e10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001e14:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001e18:	ed93 7a00 	vldr	s14, [r3]
 8001e1c:	edd2 6a00 	vldr	s13, [r2]
 8001e20:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8001e24:	ee20 0a26 	vmul.f32	s0, s0, s13
 8001e28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e2c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8001e30:	4770      	bx	lr
 8001e32:	ee30 0a47 	vsub.f32	s0, s0, s14
 8001e36:	2101      	movs	r1, #1
 8001e38:	2300      	movs	r3, #0
 8001e3a:	e7e6      	b.n	8001e0a <arm_sin_f32+0x4e>
 8001e3c:	3e22f983 	.word	0x3e22f983
 8001e40:	44000000 	.word	0x44000000
 8001e44:	08002004 	.word	0x08002004

08001e48 <arm_cos_f32>:
 8001e48:	eddf 7a21 	vldr	s15, [pc, #132]	; 8001ed0 <arm_cos_f32+0x88>
 8001e4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001e50:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8001e54:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001e58:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e60:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8001e64:	d504      	bpl.n	8001e70 <arm_cos_f32+0x28>
 8001e66:	ee17 3a90 	vmov	r3, s15
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	ee07 3a90 	vmov	s15, r3
 8001e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e74:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001ed4 <arm_cos_f32+0x8c>
 8001e78:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001e7c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001e80:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8001e84:	ee17 3a90 	vmov	r3, s15
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e8e:	d21a      	bcs.n	8001ec6 <arm_cos_f32+0x7e>
 8001e90:	ee07 3a90 	vmov	s15, r3
 8001e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e98:	1c59      	adds	r1, r3, #1
 8001e9a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001e9e:	4a0e      	ldr	r2, [pc, #56]	; (8001ed8 <arm_cos_f32+0x90>)
 8001ea0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001ea4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8001ea8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001eac:	ed93 7a00 	vldr	s14, [r3]
 8001eb0:	edd2 6a00 	vldr	s13, [r2]
 8001eb4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8001eb8:	ee20 0a26 	vmul.f32	s0, s0, s13
 8001ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec0:	ee37 0a80 	vadd.f32	s0, s15, s0
 8001ec4:	4770      	bx	lr
 8001ec6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8001eca:	2101      	movs	r1, #1
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e7e6      	b.n	8001e9e <arm_cos_f32+0x56>
 8001ed0:	3e22f983 	.word	0x3e22f983
 8001ed4:	44000000 	.word	0x44000000
 8001ed8:	08002004 	.word	0x08002004

08001edc <memset>:
 8001edc:	4402      	add	r2, r0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d100      	bne.n	8001ee6 <memset+0xa>
 8001ee4:	4770      	bx	lr
 8001ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8001eea:	e7f9      	b.n	8001ee0 <memset+0x4>

08001eec <__errno>:
 8001eec:	4b01      	ldr	r3, [pc, #4]	; (8001ef4 <__errno+0x8>)
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000058 	.word	0x20000058

08001ef8 <__libc_init_array>:
 8001ef8:	b570      	push	{r4, r5, r6, lr}
 8001efa:	4d0d      	ldr	r5, [pc, #52]	; (8001f30 <__libc_init_array+0x38>)
 8001efc:	4c0d      	ldr	r4, [pc, #52]	; (8001f34 <__libc_init_array+0x3c>)
 8001efe:	1b64      	subs	r4, r4, r5
 8001f00:	10a4      	asrs	r4, r4, #2
 8001f02:	2600      	movs	r6, #0
 8001f04:	42a6      	cmp	r6, r4
 8001f06:	d109      	bne.n	8001f1c <__libc_init_array+0x24>
 8001f08:	4d0b      	ldr	r5, [pc, #44]	; (8001f38 <__libc_init_array+0x40>)
 8001f0a:	4c0c      	ldr	r4, [pc, #48]	; (8001f3c <__libc_init_array+0x44>)
 8001f0c:	f000 f83a 	bl	8001f84 <_init>
 8001f10:	1b64      	subs	r4, r4, r5
 8001f12:	10a4      	asrs	r4, r4, #2
 8001f14:	2600      	movs	r6, #0
 8001f16:	42a6      	cmp	r6, r4
 8001f18:	d105      	bne.n	8001f26 <__libc_init_array+0x2e>
 8001f1a:	bd70      	pop	{r4, r5, r6, pc}
 8001f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f20:	4798      	blx	r3
 8001f22:	3601      	adds	r6, #1
 8001f24:	e7ee      	b.n	8001f04 <__libc_init_array+0xc>
 8001f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f2a:	4798      	blx	r3
 8001f2c:	3601      	adds	r6, #1
 8001f2e:	e7f2      	b.n	8001f16 <__libc_init_array+0x1e>
 8001f30:	08002808 	.word	0x08002808
 8001f34:	08002808 	.word	0x08002808
 8001f38:	08002808 	.word	0x08002808
 8001f3c:	0800280c 	.word	0x0800280c

08001f40 <sqrtf>:
 8001f40:	b508      	push	{r3, lr}
 8001f42:	ed2d 8b02 	vpush	{d8}
 8001f46:	eeb0 8a40 	vmov.f32	s16, s0
 8001f4a:	f000 f817 	bl	8001f7c <__ieee754_sqrtf>
 8001f4e:	eeb4 8a48 	vcmp.f32	s16, s16
 8001f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f56:	d60c      	bvs.n	8001f72 <sqrtf+0x32>
 8001f58:	eddf 8a07 	vldr	s17, [pc, #28]	; 8001f78 <sqrtf+0x38>
 8001f5c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8001f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f64:	d505      	bpl.n	8001f72 <sqrtf+0x32>
 8001f66:	f7ff ffc1 	bl	8001eec <__errno>
 8001f6a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8001f6e:	2321      	movs	r3, #33	; 0x21
 8001f70:	6003      	str	r3, [r0, #0]
 8001f72:	ecbd 8b02 	vpop	{d8}
 8001f76:	bd08      	pop	{r3, pc}
 8001f78:	00000000 	.word	0x00000000

08001f7c <__ieee754_sqrtf>:
 8001f7c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8001f80:	4770      	bx	lr
	...

08001f84 <_init>:
 8001f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f86:	bf00      	nop
 8001f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f8a:	bc08      	pop	{r3}
 8001f8c:	469e      	mov	lr, r3
 8001f8e:	4770      	bx	lr

08001f90 <_fini>:
 8001f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f92:	bf00      	nop
 8001f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f96:	bc08      	pop	{r3}
 8001f98:	469e      	mov	lr, r3
 8001f9a:	4770      	bx	lr
