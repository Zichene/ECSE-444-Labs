
Lab 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001758  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08001914  08001914  00011914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800197c  0800197c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800197c  0800197c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800197c  0800197c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800197c  0800197c  0001197c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001980  08001980  00011980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001990  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001990  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000692a  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000011b  00000000  00000000  00026a1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00004dd8  00000000  00000000  00026b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000124a  00000000  00000000  0002b911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000005d8  00000000  00000000  0002cb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f92dc  00000000  00000000  0002d138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000040d  00000000  00000000  00126414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00028f3a  00000000  00000000  00126821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001454  00000000  00000000  0014f75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000363  00000000  00000000  00150bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  00150f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080018fc 	.word	0x080018fc

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080018fc 	.word	0x080018fc

080001fc <asmMax>:
 80001fc:	b430      	push	{r4, r5}
 80001fe:	ed90 0a00 	vldr	s0, [r0]
 8000202:	f04f 0400 	mov.w	r4, #0

08000206 <loop>:
 8000206:	3901      	subs	r1, #1
 8000208:	db0c      	blt.n	8000224 <done>
 800020a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 800020e:	edd5 0a00 	vldr	s1, [r5]
 8000212:	eeb4 0a60 	vcmp.f32	s0, s1
 8000216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800021a:	dc02      	bgt.n	8000222 <continue>
 800021c:	eeb0 0a60 	vmov.f32	s0, s1
 8000220:	460c      	mov	r4, r1

08000222 <continue>:
 8000222:	e7f0      	b.n	8000206 <loop>

08000224 <done>:
 8000224:	ed82 0a00 	vstr	s0, [r2]
 8000228:	601c      	str	r4, [r3, #0]
 800022a:	bc30      	pop	{r4, r5}
 800022c:	4770      	bx	lr
	...

08000230 <c_sqrt>:
#define NUM_ITERATIONS 30
/**
 * Implementation of the square root function using Newton-Raphson method.
 * Returns -1 if parameter 'in' is negative.
 */
void c_sqrt(float32_t in, float32_t *pOut) {
 8000230:	b480      	push	{r7}
 8000232:	b087      	sub	sp, #28
 8000234:	af00      	add	r7, sp, #0
 8000236:	ed87 0a01 	vstr	s0, [r7, #4]
 800023a:	6038      	str	r0, [r7, #0]
	// edge cases
	if (in < 0) {
 800023c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000240:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000248:	d503      	bpl.n	8000252 <c_sqrt+0x22>
		(*pOut) = -1;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	4a23      	ldr	r2, [pc, #140]	; (80002dc <c_sqrt+0xac>)
 800024e:	601a      	str	r2, [r3, #0]
		return;
 8000250:	e03e      	b.n	80002d0 <c_sqrt+0xa0>
	}

	if (in == 0) {
 8000252:	edd7 7a01 	vldr	s15, [r7, #4]
 8000256:	eef5 7a40 	vcmp.f32	s15, #0.0
 800025a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800025e:	d104      	bne.n	800026a <c_sqrt+0x3a>
		(*pOut) = 0;
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	f04f 0200 	mov.w	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
		return;
 8000268:	e032      	b.n	80002d0 <c_sqrt+0xa0>
	}

	// initial guess x_0
	float32_t x_0 = in/2; // divide by 2
 800026a:	ed97 7a01 	vldr	s14, [r7, #4]
 800026e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000272:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000276:	edc7 7a05 	vstr	s15, [r7, #20]
	float32_t cur = -1;
 800027a:	4b18      	ldr	r3, [pc, #96]	; (80002dc <c_sqrt+0xac>)
 800027c:	613b      	str	r3, [r7, #16]

	// iteration loops
	for (int i = 0; i < NUM_ITERATIONS; i++) {
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
 8000282:	e01d      	b.n	80002c0 <c_sqrt+0x90>
		x_0 = (x_0*x_0 + in)/(2*x_0);
 8000284:	edd7 7a05 	vldr	s15, [r7, #20]
 8000288:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800028c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000290:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000294:	edd7 7a05 	vldr	s15, [r7, #20]
 8000298:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800029c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80002a0:	edc7 7a05 	vstr	s15, [r7, #20]
		// checking to see if we have stabilized on a value
		if (cur == x_0) {
 80002a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80002a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80002ac:	eeb4 7a67 	vcmp.f32	s14, s15
 80002b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002b4:	d008      	beq.n	80002c8 <c_sqrt+0x98>
			break;
		}
		cur = x_0;
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < NUM_ITERATIONS; i++) {
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	3301      	adds	r3, #1
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	2b1d      	cmp	r3, #29
 80002c4:	ddde      	ble.n	8000284 <c_sqrt+0x54>
 80002c6:	e000      	b.n	80002ca <c_sqrt+0x9a>
			break;
 80002c8:	bf00      	nop
	}
	(*pOut) = x_0;
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	697a      	ldr	r2, [r7, #20]
 80002ce:	601a      	str	r2, [r3, #0]
}
 80002d0:	371c      	adds	r7, #28
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	bf800000 	.word	0xbf800000

080002e0 <cMax>:
 80002e0:	b480      	push	{r7}
 80002e2:	b087      	sub	sp, #28
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	60b9      	str	r1, [r7, #8]
 80002ea:	607a      	str	r2, [r7, #4]
 80002ec:	603b      	str	r3, [r7, #0]
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	2301      	movs	r3, #1
 80002fe:	617b      	str	r3, [r7, #20]
 8000300:	e01a      	b.n	8000338 <cMax+0x58>
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	68fa      	ldr	r2, [r7, #12]
 8000308:	4413      	add	r3, r2
 800030a:	ed93 7a00 	vldr	s14, [r3]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	edd3 7a00 	vldr	s15, [r3]
 8000314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800031c:	db09      	blt.n	8000332 <cMax+0x52>
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	68fa      	ldr	r2, [r7, #12]
 8000324:	4413      	add	r3, r2
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	697a      	ldr	r2, [r7, #20]
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	697b      	ldr	r3, [r7, #20]
 8000334:	3301      	adds	r3, #1
 8000336:	617b      	str	r3, [r7, #20]
 8000338:	697b      	ldr	r3, [r7, #20]
 800033a:	68ba      	ldr	r2, [r7, #8]
 800033c:	429a      	cmp	r2, r3
 800033e:	d8e0      	bhi.n	8000302 <cMax+0x22>
 8000340:	bf00      	nop
 8000342:	bf00      	nop
 8000344:	371c      	adds	r7, #28
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
	...

08000350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000350:	b5b0      	push	{r4, r5, r7, lr}
 8000352:	b092      	sub	sp, #72	; 0x48
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000356:	f000 f97a 	bl	800064e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035a:	f000 f87f 	bl	800045c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800035e:	f000 f8cf 	bl	8000500 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // define our variables and array
  float max = 0;
 8000362:	f04f 0300 	mov.w	r3, #0
 8000366:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t maxIndex;
  // the max is 88.49 at index 5
  float array[10] = {48.21, 79.48, 24.27, 28.82, 78.24, 88.49, 31.19, 5.52, 82.70, 77.73};
 8000368:	4b37      	ldr	r3, [pc, #220]	; (8000448 <main+0xf8>)
 800036a:	f107 0408 	add.w	r4, r7, #8
 800036e:	461d      	mov	r5, r3
 8000370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000372:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000378:	e895 0003 	ldmia.w	r5, {r0, r1}
 800037c:	e884 0003 	stmia.w	r4, {r0, r1}

  // square root variables
  const float32_t num = 100;
 8000380:	4b32      	ldr	r3, [pc, #200]	; (800044c <main+0xfc>)
 8000382:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t result = 0;
 8000384:	f04f 0300 	mov.w	r3, #0
 8000388:	607b      	str	r3, [r7, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
// C_max
	  // C implementation
	  ITM_Port32(31) = 1;
 800038a:	4b31      	ldr	r3, [pc, #196]	; (8000450 <main+0x100>)
 800038c:	2201      	movs	r2, #1
 800038e:	601a      	str	r2, [r3, #0]
	  for (uint32_t i=0; i<1000; i++)
 8000390:	2300      	movs	r3, #0
 8000392:	647b      	str	r3, [r7, #68]	; 0x44
 8000394:	e00b      	b.n	80003ae <main+0x5e>
		  cMax(&array, 10, &max, &maxIndex);
 8000396:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800039a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800039e:	f107 0008 	add.w	r0, r7, #8
 80003a2:	210a      	movs	r1, #10
 80003a4:	f7ff ff9c 	bl	80002e0 <cMax>
	  for (uint32_t i=0; i<1000; i++)
 80003a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003aa:	3301      	adds	r3, #1
 80003ac:	647b      	str	r3, [r7, #68]	; 0x44
 80003ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80003b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80003b4:	d3ef      	bcc.n	8000396 <main+0x46>
	  ITM_Port32(31) = 2;
 80003b6:	4b26      	ldr	r3, [pc, #152]	; (8000450 <main+0x100>)
 80003b8:	2202      	movs	r2, #2
 80003ba:	601a      	str	r2, [r3, #0]

	  // Assembly implementation
	  ITM_Port32(31) = 3;
 80003bc:	4b24      	ldr	r3, [pc, #144]	; (8000450 <main+0x100>)
 80003be:	2203      	movs	r2, #3
 80003c0:	601a      	str	r2, [r3, #0]
	  for (uint32_t i=0; i<1000; i++)
 80003c2:	2300      	movs	r3, #0
 80003c4:	643b      	str	r3, [r7, #64]	; 0x40
 80003c6:	e00b      	b.n	80003e0 <main+0x90>
		  asmMax(&array, 10, &max, &maxIndex);
 80003c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003cc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80003d0:	f107 0008 	add.w	r0, r7, #8
 80003d4:	210a      	movs	r1, #10
 80003d6:	f7ff ff11 	bl	80001fc <asmMax>
	  for (uint32_t i=0; i<1000; i++)
 80003da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003dc:	3301      	adds	r3, #1
 80003de:	643b      	str	r3, [r7, #64]	; 0x40
 80003e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80003e6:	d3ef      	bcc.n	80003c8 <main+0x78>
	  ITM_Port32(31) = 4;
 80003e8:	4b19      	ldr	r3, [pc, #100]	; (8000450 <main+0x100>)
 80003ea:	2204      	movs	r2, #4
 80003ec:	601a      	str	r2, [r3, #0]

	  // CMSIS-DSP implementation
	  ITM_Port32(31) = 5;
 80003ee:	4b18      	ldr	r3, [pc, #96]	; (8000450 <main+0x100>)
 80003f0:	2205      	movs	r2, #5
 80003f2:	601a      	str	r2, [r3, #0]
	  for (uint32_t i=0; i<1000; i++)
 80003f4:	2300      	movs	r3, #0
 80003f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80003f8:	e00b      	b.n	8000412 <main+0xc2>
		  arm_max_f32(&array, 10, &max, &maxIndex);
 80003fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003fe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000402:	f107 0008 	add.w	r0, r7, #8
 8000406:	210a      	movs	r1, #10
 8000408:	f001 f9e0 	bl	80017cc <arm_max_f32>
	  for (uint32_t i=0; i<1000; i++)
 800040c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800040e:	3301      	adds	r3, #1
 8000410:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000414:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000418:	d3ef      	bcc.n	80003fa <main+0xaa>
	  ITM_Port32(31) = 6;
 800041a:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <main+0x100>)
 800041c:	2206      	movs	r2, #6
 800041e:	601a      	str	r2, [r3, #0]
	  ITM_Port32(31) = 9;
	  for (uint32_t i=0; i<1000; i++)
		  c_sqrt(num, &result);
	  ITM_Port32(31) = 10;
*/
	  c_sqrt(-2, &result);
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	4618      	mov	r0, r3
 8000424:	eeb8 0a00 	vmov.f32	s0, #128	; 0xc0000000 -2.0
 8000428:	f7ff ff02 	bl	8000230 <c_sqrt>
	  c_sqrt(100, &result);
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	4618      	mov	r0, r3
 8000430:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8000454 <main+0x104>
 8000434:	f7ff fefc 	bl	8000230 <c_sqrt>
	  c_sqrt(1000000, &result);
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	4618      	mov	r0, r3
 800043c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8000458 <main+0x108>
 8000440:	f7ff fef6 	bl	8000230 <c_sqrt>
	  ITM_Port32(31) = 1;
 8000444:	e7a1      	b.n	800038a <main+0x3a>
 8000446:	bf00      	nop
 8000448:	08001914 	.word	0x08001914
 800044c:	42c80000 	.word	0x42c80000
 8000450:	e000007c 	.word	0xe000007c
 8000454:	42c80000 	.word	0x42c80000
 8000458:	49742400 	.word	0x49742400

0800045c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b096      	sub	sp, #88	; 0x58
 8000460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000462:	f107 0314 	add.w	r3, r7, #20
 8000466:	2244      	movs	r2, #68	; 0x44
 8000468:	2100      	movs	r1, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f001 fa1a 	bl	80018a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000470:	463b      	mov	r3, r7
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]
 800047c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800047e:	2000      	movs	r0, #0
 8000480:	f000 fa60 	bl	8000944 <HAL_PWREx_ControlVoltageScaling>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800048a:	f000 f851 	bl	8000530 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800048e:	2310      	movs	r3, #16
 8000490:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000492:	2301      	movs	r3, #1
 8000494:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800049a:	2360      	movs	r3, #96	; 0x60
 800049c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800049e:	2302      	movs	r3, #2
 80004a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80004a2:	2301      	movs	r3, #1
 80004a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004a6:	2301      	movs	r3, #1
 80004a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80004aa:	233c      	movs	r3, #60	; 0x3c
 80004ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004ae:	2302      	movs	r3, #2
 80004b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004b2:	2302      	movs	r3, #2
 80004b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004b6:	2302      	movs	r3, #2
 80004b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ba:	f107 0314 	add.w	r3, r7, #20
 80004be:	4618      	mov	r0, r3
 80004c0:	f000 fae4 	bl	8000a8c <HAL_RCC_OscConfig>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80004ca:	f000 f831 	bl	8000530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ce:	230f      	movs	r3, #15
 80004d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d2:	2303      	movs	r3, #3
 80004d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d6:	2300      	movs	r3, #0
 80004d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004da:	2300      	movs	r3, #0
 80004dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80004e2:	463b      	mov	r3, r7
 80004e4:	2105      	movs	r1, #5
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 feea 	bl	80012c0 <HAL_RCC_ClockConfig>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004f2:	f000 f81d 	bl	8000530 <Error_Handler>
  }
}
 80004f6:	bf00      	nop
 80004f8:	3758      	adds	r7, #88	; 0x58
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <MX_GPIO_Init+0x2c>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a08      	ldr	r2, [pc, #32]	; (800052c <MX_GPIO_Init+0x2c>)
 800050c:	f043 0302 	orr.w	r3, r3, #2
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b06      	ldr	r3, [pc, #24]	; (800052c <MX_GPIO_Init+0x2c>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0302 	and.w	r3, r3, #2
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000

08000530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000534:	b672      	cpsid	i
}
 8000536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000538:	e7fe      	b.n	8000538 <Error_Handler+0x8>
	...

0800053c <HAL_MspInit>:
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <HAL_MspInit+0x44>)
 8000544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000546:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <HAL_MspInit+0x44>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6613      	str	r3, [r2, #96]	; 0x60
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <HAL_MspInit+0x44>)
 8000550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <HAL_MspInit+0x44>)
 800055c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800055e:	4a08      	ldr	r2, [pc, #32]	; (8000580 <HAL_MspInit+0x44>)
 8000560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000564:	6593      	str	r3, [r2, #88]	; 0x58
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <HAL_MspInit+0x44>)
 8000568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <NMI_Handler>:
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
 8000588:	e7fe      	b.n	8000588 <NMI_Handler+0x4>

0800058a <HardFault_Handler>:
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
 800058e:	e7fe      	b.n	800058e <HardFault_Handler+0x4>

08000590 <MemManage_Handler>:
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
 8000594:	e7fe      	b.n	8000594 <MemManage_Handler+0x4>

08000596 <BusFault_Handler>:
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0
 800059a:	e7fe      	b.n	800059a <BusFault_Handler+0x4>

0800059c <UsageFault_Handler>:
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
 80005a0:	e7fe      	b.n	80005a0 <UsageFault_Handler+0x4>

080005a2 <SVC_Handler>:
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <DebugMon_Handler>:
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <PendSV_Handler>:
 80005be:	b480      	push	{r7}
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	bf00      	nop
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <SysTick_Handler>:
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	f000 f892 	bl	80006f8 <HAL_IncTick>
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <SystemInit>:
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <SystemInit+0x20>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e2:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <SystemInit+0x20>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80005fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000634 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000600:	f7ff ffea 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000604:	480c      	ldr	r0, [pc, #48]	; (8000638 <LoopForever+0x6>)
  ldr r1, =_edata
 8000606:	490d      	ldr	r1, [pc, #52]	; (800063c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000608:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <LoopForever+0xe>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800060c:	e002      	b.n	8000614 <LoopCopyDataInit>

0800060e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000612:	3304      	adds	r3, #4

08000614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000618:	d3f9      	bcc.n	800060e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800061c:	4c0a      	ldr	r4, [pc, #40]	; (8000648 <LoopForever+0x16>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000620:	e001      	b.n	8000626 <LoopFillZerobss>

08000622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000624:	3204      	adds	r2, #4

08000626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000628:	d3fb      	bcc.n	8000622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800062a:	f001 f943 	bl	80018b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800062e:	f7ff fe8f 	bl	8000350 <main>

08000632 <LoopForever>:

LoopForever:
    b LoopForever
 8000632:	e7fe      	b.n	8000632 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000634:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800063c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000640:	08001984 	.word	0x08001984
  ldr r2, =_sbss
 8000644:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000648:	2000002c 	.word	0x2000002c

0800064c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800064c:	e7fe      	b.n	800064c <ADC1_IRQHandler>

0800064e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000654:	2300      	movs	r3, #0
 8000656:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000658:	2003      	movs	r0, #3
 800065a:	f000 f91f 	bl	800089c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800065e:	2000      	movs	r0, #0
 8000660:	f000 f80e 	bl	8000680 <HAL_InitTick>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d002      	beq.n	8000670 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800066a:	2301      	movs	r3, #1
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	e001      	b.n	8000674 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000670:	f7ff ff64 	bl	800053c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000674:	79fb      	ldrb	r3, [r7, #7]
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000688:	2300      	movs	r3, #0
 800068a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <HAL_InitTick+0x6c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d023      	beq.n	80006dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <HAL_InitTick+0x70>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <HAL_InitTick+0x6c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4619      	mov	r1, r3
 800069e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f91d 	bl	80008ea <HAL_SYSTICK_Config>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d10f      	bne.n	80006d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b0f      	cmp	r3, #15
 80006ba:	d809      	bhi.n	80006d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006bc:	2200      	movs	r2, #0
 80006be:	6879      	ldr	r1, [r7, #4]
 80006c0:	f04f 30ff 	mov.w	r0, #4294967295
 80006c4:	f000 f8f5 	bl	80008b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006c8:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <HAL_InitTick+0x74>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6013      	str	r3, [r2, #0]
 80006ce:	e007      	b.n	80006e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006d0:	2301      	movs	r3, #1
 80006d2:	73fb      	strb	r3, [r7, #15]
 80006d4:	e004      	b.n	80006e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	73fb      	strb	r3, [r7, #15]
 80006da:	e001      	b.n	80006e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006dc:	2301      	movs	r3, #1
 80006de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000008 	.word	0x20000008
 80006f0:	20000000 	.word	0x20000000
 80006f4:	20000004 	.word	0x20000004

080006f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_IncTick+0x20>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_IncTick+0x24>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4413      	add	r3, r2
 8000708:	4a04      	ldr	r2, [pc, #16]	; (800071c <HAL_IncTick+0x24>)
 800070a:	6013      	str	r3, [r2, #0]
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	20000008 	.word	0x20000008
 800071c:	20000028 	.word	0x20000028

08000720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return uwTick;
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <HAL_GetTick+0x14>)
 8000726:	681b      	ldr	r3, [r3, #0]
}
 8000728:	4618      	mov	r0, r3
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000028 	.word	0x20000028

08000738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000754:	4013      	ands	r3, r2
 8000756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800076a:	4a04      	ldr	r2, [pc, #16]	; (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	60d3      	str	r3, [r2, #12]
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <__NVIC_GetPriorityGrouping+0x18>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	0a1b      	lsrs	r3, r3, #8
 800078a:	f003 0307 	and.w	r3, r3, #7
}
 800078e:	4618      	mov	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	db0a      	blt.n	80007c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	490c      	ldr	r1, [pc, #48]	; (80007e8 <__NVIC_SetPriority+0x4c>)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	0112      	lsls	r2, r2, #4
 80007bc:	b2d2      	uxtb	r2, r2
 80007be:	440b      	add	r3, r1
 80007c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c4:	e00a      	b.n	80007dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4908      	ldr	r1, [pc, #32]	; (80007ec <__NVIC_SetPriority+0x50>)
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	f003 030f 	and.w	r3, r3, #15
 80007d2:	3b04      	subs	r3, #4
 80007d4:	0112      	lsls	r2, r2, #4
 80007d6:	b2d2      	uxtb	r2, r2
 80007d8:	440b      	add	r3, r1
 80007da:	761a      	strb	r2, [r3, #24]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	e000e100 	.word	0xe000e100
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b089      	sub	sp, #36	; 0x24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f003 0307 	and.w	r3, r3, #7
 8000802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	f1c3 0307 	rsb	r3, r3, #7
 800080a:	2b04      	cmp	r3, #4
 800080c:	bf28      	it	cs
 800080e:	2304      	movcs	r3, #4
 8000810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3304      	adds	r3, #4
 8000816:	2b06      	cmp	r3, #6
 8000818:	d902      	bls.n	8000820 <NVIC_EncodePriority+0x30>
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3b03      	subs	r3, #3
 800081e:	e000      	b.n	8000822 <NVIC_EncodePriority+0x32>
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	f04f 32ff 	mov.w	r2, #4294967295
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	43da      	mvns	r2, r3
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	401a      	ands	r2, r3
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000838:	f04f 31ff 	mov.w	r1, #4294967295
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	fa01 f303 	lsl.w	r3, r1, r3
 8000842:	43d9      	mvns	r1, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000848:	4313      	orrs	r3, r2
         );
}
 800084a:	4618      	mov	r0, r3
 800084c:	3724      	adds	r7, #36	; 0x24
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3b01      	subs	r3, #1
 8000864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000868:	d301      	bcc.n	800086e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800086a:	2301      	movs	r3, #1
 800086c:	e00f      	b.n	800088e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <SysTick_Config+0x40>)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3b01      	subs	r3, #1
 8000874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000876:	210f      	movs	r1, #15
 8000878:	f04f 30ff 	mov.w	r0, #4294967295
 800087c:	f7ff ff8e 	bl	800079c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <SysTick_Config+0x40>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000886:	4b04      	ldr	r3, [pc, #16]	; (8000898 <SysTick_Config+0x40>)
 8000888:	2207      	movs	r2, #7
 800088a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	e000e010 	.word	0xe000e010

0800089c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff ff47 	bl	8000738 <__NVIC_SetPriorityGrouping>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b086      	sub	sp, #24
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	4603      	mov	r3, r0
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
 80008be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008c4:	f7ff ff5c 	bl	8000780 <__NVIC_GetPriorityGrouping>
 80008c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	68b9      	ldr	r1, [r7, #8]
 80008ce:	6978      	ldr	r0, [r7, #20]
 80008d0:	f7ff ff8e 	bl	80007f0 <NVIC_EncodePriority>
 80008d4:	4602      	mov	r2, r0
 80008d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008da:	4611      	mov	r1, r2
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff5d 	bl	800079c <__NVIC_SetPriority>
}
 80008e2:	bf00      	nop
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff ffb0 	bl	8000858 <SysTick_Config>
 80008f8:	4603      	mov	r3, r0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <HAL_PWREx_GetVoltageRange+0x3c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000914:	d102      	bne.n	800091c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091a:	e00b      	b.n	8000934 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <HAL_PWREx_GetVoltageRange+0x3c>)
 800091e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800092a:	d102      	bne.n	8000932 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800092c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000930:	e000      	b.n	8000934 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000932:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40007000 	.word	0x40007000

08000944 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d141      	bne.n	80009d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000952:	4b4b      	ldr	r3, [pc, #300]	; (8000a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800095a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800095e:	d131      	bne.n	80009c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000960:	4b47      	ldr	r3, [pc, #284]	; (8000a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000962:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000966:	4a46      	ldr	r2, [pc, #280]	; (8000a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800096c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000970:	4b43      	ldr	r3, [pc, #268]	; (8000a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000978:	4a41      	ldr	r2, [pc, #260]	; (8000a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800097a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000980:	4b40      	ldr	r3, [pc, #256]	; (8000a84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2232      	movs	r2, #50	; 0x32
 8000986:	fb02 f303 	mul.w	r3, r2, r3
 800098a:	4a3f      	ldr	r2, [pc, #252]	; (8000a88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800098c:	fba2 2303 	umull	r2, r3, r2, r3
 8000990:	0c9b      	lsrs	r3, r3, #18
 8000992:	3301      	adds	r3, #1
 8000994:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000996:	e002      	b.n	800099e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	3b01      	subs	r3, #1
 800099c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800099e:	4b38      	ldr	r3, [pc, #224]	; (8000a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009aa:	d102      	bne.n	80009b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d1f2      	bne.n	8000998 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80009b2:	4b33      	ldr	r3, [pc, #204]	; (8000a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009be:	d158      	bne.n	8000a72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80009c0:	2303      	movs	r3, #3
 80009c2:	e057      	b.n	8000a74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80009c4:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80009c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009ca:	4a2d      	ldr	r2, [pc, #180]	; (8000a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80009cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80009d4:	e04d      	b.n	8000a72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009dc:	d141      	bne.n	8000a62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80009de:	4b28      	ldr	r3, [pc, #160]	; (8000a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80009e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009ea:	d131      	bne.n	8000a50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80009ec:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80009ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009f2:	4a23      	ldr	r2, [pc, #140]	; (8000a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80009f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80009fc:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a04:	4a1e      	ldr	r2, [pc, #120]	; (8000a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2232      	movs	r2, #50	; 0x32
 8000a12:	fb02 f303 	mul.w	r3, r2, r3
 8000a16:	4a1c      	ldr	r2, [pc, #112]	; (8000a88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000a18:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1c:	0c9b      	lsrs	r3, r3, #18
 8000a1e:	3301      	adds	r3, #1
 8000a20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000a22:	e002      	b.n	8000a2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a36:	d102      	bne.n	8000a3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d1f2      	bne.n	8000a24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a4a:	d112      	bne.n	8000a72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	e011      	b.n	8000a74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000a50:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000a60:	e007      	b.n	8000a72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000a6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a70:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	40007000 	.word	0x40007000
 8000a84:	20000000 	.word	0x20000000
 8000a88:	431bde83 	.word	0x431bde83

08000a8c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d102      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	f000 bc08 	b.w	80012b0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000aa0:	4b96      	ldr	r3, [pc, #600]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	f003 030c 	and.w	r3, r3, #12
 8000aa8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000aaa:	4b94      	ldr	r3, [pc, #592]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	f003 0303 	and.w	r3, r3, #3
 8000ab2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f003 0310 	and.w	r3, r3, #16
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	f000 80e4 	beq.w	8000c8a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d007      	beq.n	8000ad8 <HAL_RCC_OscConfig+0x4c>
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	2b0c      	cmp	r3, #12
 8000acc:	f040 808b 	bne.w	8000be6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	f040 8087 	bne.w	8000be6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ad8:	4b88      	ldr	r3, [pc, #544]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f003 0302 	and.w	r3, r3, #2
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d005      	beq.n	8000af0 <HAL_RCC_OscConfig+0x64>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d101      	bne.n	8000af0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	e3df      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6a1a      	ldr	r2, [r3, #32]
 8000af4:	4b81      	ldr	r3, [pc, #516]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f003 0308 	and.w	r3, r3, #8
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d004      	beq.n	8000b0a <HAL_RCC_OscConfig+0x7e>
 8000b00:	4b7e      	ldr	r3, [pc, #504]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b08:	e005      	b.n	8000b16 <HAL_RCC_OscConfig+0x8a>
 8000b0a:	4b7c      	ldr	r3, [pc, #496]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b10:	091b      	lsrs	r3, r3, #4
 8000b12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d223      	bcs.n	8000b62 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6a1b      	ldr	r3, [r3, #32]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 fd94 	bl	800164c <RCC_SetFlashLatencyFromMSIRange>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e3c0      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b2e:	4b73      	ldr	r3, [pc, #460]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a72      	ldr	r2, [pc, #456]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000b34:	f043 0308 	orr.w	r3, r3, #8
 8000b38:	6013      	str	r3, [r2, #0]
 8000b3a:	4b70      	ldr	r3, [pc, #448]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6a1b      	ldr	r3, [r3, #32]
 8000b46:	496d      	ldr	r1, [pc, #436]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b4c:	4b6b      	ldr	r3, [pc, #428]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	69db      	ldr	r3, [r3, #28]
 8000b58:	021b      	lsls	r3, r3, #8
 8000b5a:	4968      	ldr	r1, [pc, #416]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	604b      	str	r3, [r1, #4]
 8000b60:	e025      	b.n	8000bae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b62:	4b66      	ldr	r3, [pc, #408]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a65      	ldr	r2, [pc, #404]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000b68:	f043 0308 	orr.w	r3, r3, #8
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	4b63      	ldr	r3, [pc, #396]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6a1b      	ldr	r3, [r3, #32]
 8000b7a:	4960      	ldr	r1, [pc, #384]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b80:	4b5e      	ldr	r3, [pc, #376]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	69db      	ldr	r3, [r3, #28]
 8000b8c:	021b      	lsls	r3, r3, #8
 8000b8e:	495b      	ldr	r1, [pc, #364]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000b90:	4313      	orrs	r3, r2
 8000b92:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d109      	bne.n	8000bae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6a1b      	ldr	r3, [r3, #32]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 fd54 	bl	800164c <RCC_SetFlashLatencyFromMSIRange>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e380      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000bae:	f000 fcc1 	bl	8001534 <HAL_RCC_GetSysClockFreq>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	4b51      	ldr	r3, [pc, #324]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	091b      	lsrs	r3, r3, #4
 8000bba:	f003 030f 	and.w	r3, r3, #15
 8000bbe:	4950      	ldr	r1, [pc, #320]	; (8000d00 <HAL_RCC_OscConfig+0x274>)
 8000bc0:	5ccb      	ldrb	r3, [r1, r3]
 8000bc2:	f003 031f 	and.w	r3, r3, #31
 8000bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bca:	4a4e      	ldr	r2, [pc, #312]	; (8000d04 <HAL_RCC_OscConfig+0x278>)
 8000bcc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000bce:	4b4e      	ldr	r3, [pc, #312]	; (8000d08 <HAL_RCC_OscConfig+0x27c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fd54 	bl	8000680 <HAL_InitTick>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d052      	beq.n	8000c88 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
 8000be4:	e364      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d032      	beq.n	8000c54 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000bee:	4b43      	ldr	r3, [pc, #268]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a42      	ldr	r2, [pc, #264]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000bfa:	f7ff fd91 	bl	8000720 <HAL_GetTick>
 8000bfe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000c00:	e008      	b.n	8000c14 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c02:	f7ff fd8d 	bl	8000720 <HAL_GetTick>
 8000c06:	4602      	mov	r2, r0
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d901      	bls.n	8000c14 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000c10:	2303      	movs	r3, #3
 8000c12:	e34d      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000c14:	4b39      	ldr	r3, [pc, #228]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f003 0302 	and.w	r3, r3, #2
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d0f0      	beq.n	8000c02 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c20:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a35      	ldr	r2, [pc, #212]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000c26:	f043 0308 	orr.w	r3, r3, #8
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	4b33      	ldr	r3, [pc, #204]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a1b      	ldr	r3, [r3, #32]
 8000c38:	4930      	ldr	r1, [pc, #192]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c3e:	4b2f      	ldr	r3, [pc, #188]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	021b      	lsls	r3, r3, #8
 8000c4c:	492b      	ldr	r1, [pc, #172]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	604b      	str	r3, [r1, #4]
 8000c52:	e01a      	b.n	8000c8a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000c54:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a28      	ldr	r2, [pc, #160]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000c5a:	f023 0301 	bic.w	r3, r3, #1
 8000c5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000c60:	f7ff fd5e 	bl	8000720 <HAL_GetTick>
 8000c64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000c66:	e008      	b.n	8000c7a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c68:	f7ff fd5a 	bl	8000720 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d901      	bls.n	8000c7a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000c76:	2303      	movs	r3, #3
 8000c78:	e31a      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000c7a:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d1f0      	bne.n	8000c68 <HAL_RCC_OscConfig+0x1dc>
 8000c86:	e000      	b.n	8000c8a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d073      	beq.n	8000d7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	2b08      	cmp	r3, #8
 8000c9a:	d005      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x21c>
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	2b0c      	cmp	r3, #12
 8000ca0:	d10e      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	d10b      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d063      	beq.n	8000d7c <HAL_RCC_OscConfig+0x2f0>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d15f      	bne.n	8000d7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e2f7      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cc8:	d106      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x24c>
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cd4:	6013      	str	r3, [r2, #0]
 8000cd6:	e025      	b.n	8000d24 <HAL_RCC_OscConfig+0x298>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ce0:	d114      	bne.n	8000d0c <HAL_RCC_OscConfig+0x280>
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a02      	ldr	r2, [pc, #8]	; (8000cfc <HAL_RCC_OscConfig+0x270>)
 8000cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	e013      	b.n	8000d24 <HAL_RCC_OscConfig+0x298>
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	0800193c 	.word	0x0800193c
 8000d04:	20000000 	.word	0x20000000
 8000d08:	20000004 	.word	0x20000004
 8000d0c:	4ba0      	ldr	r3, [pc, #640]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a9f      	ldr	r2, [pc, #636]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4b9d      	ldr	r3, [pc, #628]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a9c      	ldr	r2, [pc, #624]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d013      	beq.n	8000d54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d2c:	f7ff fcf8 	bl	8000720 <HAL_GetTick>
 8000d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d32:	e008      	b.n	8000d46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d34:	f7ff fcf4 	bl	8000720 <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	2b64      	cmp	r3, #100	; 0x64
 8000d40:	d901      	bls.n	8000d46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000d42:	2303      	movs	r3, #3
 8000d44:	e2b4      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d46:	4b92      	ldr	r3, [pc, #584]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0f0      	beq.n	8000d34 <HAL_RCC_OscConfig+0x2a8>
 8000d52:	e014      	b.n	8000d7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d54:	f7ff fce4 	bl	8000720 <HAL_GetTick>
 8000d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d5a:	e008      	b.n	8000d6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d5c:	f7ff fce0 	bl	8000720 <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b64      	cmp	r3, #100	; 0x64
 8000d68:	d901      	bls.n	8000d6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e2a0      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d6e:	4b88      	ldr	r3, [pc, #544]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1f0      	bne.n	8000d5c <HAL_RCC_OscConfig+0x2d0>
 8000d7a:	e000      	b.n	8000d7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d060      	beq.n	8000e4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	d005      	beq.n	8000d9c <HAL_RCC_OscConfig+0x310>
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	2b0c      	cmp	r3, #12
 8000d94:	d119      	bne.n	8000dca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d116      	bne.n	8000dca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d9c:	4b7c      	ldr	r3, [pc, #496]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d005      	beq.n	8000db4 <HAL_RCC_OscConfig+0x328>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d101      	bne.n	8000db4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e27d      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db4:	4b76      	ldr	r3, [pc, #472]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	061b      	lsls	r3, r3, #24
 8000dc2:	4973      	ldr	r1, [pc, #460]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000dc8:	e040      	b.n	8000e4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d023      	beq.n	8000e1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dd2:	4b6f      	ldr	r3, [pc, #444]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a6e      	ldr	r2, [pc, #440]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dde:	f7ff fc9f 	bl	8000720 <HAL_GetTick>
 8000de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000de4:	e008      	b.n	8000df8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000de6:	f7ff fc9b 	bl	8000720 <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d901      	bls.n	8000df8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000df4:	2303      	movs	r3, #3
 8000df6:	e25b      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000df8:	4b65      	ldr	r3, [pc, #404]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d0f0      	beq.n	8000de6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e04:	4b62      	ldr	r3, [pc, #392]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	691b      	ldr	r3, [r3, #16]
 8000e10:	061b      	lsls	r3, r3, #24
 8000e12:	495f      	ldr	r1, [pc, #380]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000e14:	4313      	orrs	r3, r2
 8000e16:	604b      	str	r3, [r1, #4]
 8000e18:	e018      	b.n	8000e4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e1a:	4b5d      	ldr	r3, [pc, #372]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a5c      	ldr	r2, [pc, #368]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e26:	f7ff fc7b 	bl	8000720 <HAL_GetTick>
 8000e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e2c:	e008      	b.n	8000e40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e2e:	f7ff fc77 	bl	8000720 <HAL_GetTick>
 8000e32:	4602      	mov	r2, r0
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d901      	bls.n	8000e40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e237      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000e40:	4b53      	ldr	r3, [pc, #332]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1f0      	bne.n	8000e2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 0308 	and.w	r3, r3, #8
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d03c      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	695b      	ldr	r3, [r3, #20]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d01c      	beq.n	8000e9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e60:	4b4b      	ldr	r3, [pc, #300]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e66:	4a4a      	ldr	r2, [pc, #296]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e70:	f7ff fc56 	bl	8000720 <HAL_GetTick>
 8000e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e76:	e008      	b.n	8000e8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e78:	f7ff fc52 	bl	8000720 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e212      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e8a:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0ef      	beq.n	8000e78 <HAL_RCC_OscConfig+0x3ec>
 8000e98:	e01b      	b.n	8000ed2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e9a:	4b3d      	ldr	r3, [pc, #244]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ea0:	4a3b      	ldr	r2, [pc, #236]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000ea2:	f023 0301 	bic.w	r3, r3, #1
 8000ea6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eaa:	f7ff fc39 	bl	8000720 <HAL_GetTick>
 8000eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000eb0:	e008      	b.n	8000ec4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eb2:	f7ff fc35 	bl	8000720 <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e1f5      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000ec4:	4b32      	ldr	r3, [pc, #200]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1ef      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f000 80a6 	beq.w	800102c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000ee4:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10d      	bne.n	8000f0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ef0:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef4:	4a26      	ldr	r2, [pc, #152]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efa:	6593      	str	r3, [r2, #88]	; 0x58
 8000efc:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f0c:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <HAL_RCC_OscConfig+0x508>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d118      	bne.n	8000f4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <HAL_RCC_OscConfig+0x508>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a1d      	ldr	r2, [pc, #116]	; (8000f94 <HAL_RCC_OscConfig+0x508>)
 8000f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f24:	f7ff fbfc 	bl	8000720 <HAL_GetTick>
 8000f28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f2c:	f7ff fbf8 	bl	8000720 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e1b8      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_RCC_OscConfig+0x508>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f0      	beq.n	8000f2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d108      	bne.n	8000f64 <HAL_RCC_OscConfig+0x4d8>
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f62:	e029      	b.n	8000fb8 <HAL_RCC_OscConfig+0x52c>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	2b05      	cmp	r3, #5
 8000f6a:	d115      	bne.n	8000f98 <HAL_RCC_OscConfig+0x50c>
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f72:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f82:	4a03      	ldr	r2, [pc, #12]	; (8000f90 <HAL_RCC_OscConfig+0x504>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f8c:	e014      	b.n	8000fb8 <HAL_RCC_OscConfig+0x52c>
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40007000 	.word	0x40007000
 8000f98:	4b9d      	ldr	r3, [pc, #628]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 8000f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f9e:	4a9c      	ldr	r2, [pc, #624]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 8000fa0:	f023 0301 	bic.w	r3, r3, #1
 8000fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000fa8:	4b99      	ldr	r3, [pc, #612]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 8000faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fae:	4a98      	ldr	r2, [pc, #608]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 8000fb0:	f023 0304 	bic.w	r3, r3, #4
 8000fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d016      	beq.n	8000fee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fc0:	f7ff fbae 	bl	8000720 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000fc6:	e00a      	b.n	8000fde <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fbaa 	bl	8000720 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e168      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000fde:	4b8c      	ldr	r3, [pc, #560]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 8000fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0ed      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x53c>
 8000fec:	e015      	b.n	800101a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fee:	f7ff fb97 	bl	8000720 <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ff4:	e00a      	b.n	800100c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ff6:	f7ff fb93 	bl	8000720 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	f241 3288 	movw	r2, #5000	; 0x1388
 8001004:	4293      	cmp	r3, r2
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e151      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800100c:	4b80      	ldr	r3, [pc, #512]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 800100e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1ed      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800101a:	7ffb      	ldrb	r3, [r7, #31]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d105      	bne.n	800102c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001020:	4b7b      	ldr	r3, [pc, #492]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 8001022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001024:	4a7a      	ldr	r2, [pc, #488]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 8001026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800102a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0320 	and.w	r3, r3, #32
 8001034:	2b00      	cmp	r3, #0
 8001036:	d03c      	beq.n	80010b2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	2b00      	cmp	r3, #0
 800103e:	d01c      	beq.n	800107a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001040:	4b73      	ldr	r3, [pc, #460]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 8001042:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001046:	4a72      	ldr	r2, [pc, #456]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001050:	f7ff fb66 	bl	8000720 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001058:	f7ff fb62 	bl	8000720 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e122      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800106a:	4b69      	ldr	r3, [pc, #420]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 800106c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0ef      	beq.n	8001058 <HAL_RCC_OscConfig+0x5cc>
 8001078:	e01b      	b.n	80010b2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800107a:	4b65      	ldr	r3, [pc, #404]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 800107c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001080:	4a63      	ldr	r2, [pc, #396]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 8001082:	f023 0301 	bic.w	r3, r3, #1
 8001086:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800108a:	f7ff fb49 	bl	8000720 <HAL_GetTick>
 800108e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001090:	e008      	b.n	80010a4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001092:	f7ff fb45 	bl	8000720 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e105      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80010a4:	4b5a      	ldr	r3, [pc, #360]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 80010a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1ef      	bne.n	8001092 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 80f9 	beq.w	80012ae <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	f040 80cf 	bne.w	8001264 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80010c6:	4b52      	ldr	r3, [pc, #328]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	f003 0203 	and.w	r2, r3, #3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d12c      	bne.n	8001134 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e4:	3b01      	subs	r3, #1
 80010e6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d123      	bne.n	8001134 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d11b      	bne.n	8001134 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001106:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001108:	429a      	cmp	r2, r3
 800110a:	d113      	bne.n	8001134 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001116:	085b      	lsrs	r3, r3, #1
 8001118:	3b01      	subs	r3, #1
 800111a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800111c:	429a      	cmp	r2, r3
 800111e:	d109      	bne.n	8001134 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	085b      	lsrs	r3, r3, #1
 800112c:	3b01      	subs	r3, #1
 800112e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001130:	429a      	cmp	r2, r3
 8001132:	d071      	beq.n	8001218 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	2b0c      	cmp	r3, #12
 8001138:	d068      	beq.n	800120c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800113a:	4b35      	ldr	r3, [pc, #212]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d105      	bne.n	8001152 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001146:	4b32      	ldr	r3, [pc, #200]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e0ac      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001156:	4b2e      	ldr	r3, [pc, #184]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a2d      	ldr	r2, [pc, #180]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 800115c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001160:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001162:	f7ff fadd 	bl	8000720 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800116a:	f7ff fad9 	bl	8000720 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e099      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800117c:	4b24      	ldr	r3, [pc, #144]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1f0      	bne.n	800116a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	4b21      	ldr	r3, [pc, #132]	; (8001214 <HAL_RCC_OscConfig+0x788>)
 800118e:	4013      	ands	r3, r2
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001198:	3a01      	subs	r2, #1
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	4311      	orrs	r1, r2
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80011a2:	0212      	lsls	r2, r2, #8
 80011a4:	4311      	orrs	r1, r2
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80011aa:	0852      	lsrs	r2, r2, #1
 80011ac:	3a01      	subs	r2, #1
 80011ae:	0552      	lsls	r2, r2, #21
 80011b0:	4311      	orrs	r1, r2
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011b6:	0852      	lsrs	r2, r2, #1
 80011b8:	3a01      	subs	r2, #1
 80011ba:	0652      	lsls	r2, r2, #25
 80011bc:	4311      	orrs	r1, r2
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80011c2:	06d2      	lsls	r2, r2, #27
 80011c4:	430a      	orrs	r2, r1
 80011c6:	4912      	ldr	r1, [pc, #72]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0f      	ldr	r2, [pc, #60]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 80011d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 80011de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80011e4:	f7ff fa9c 	bl	8000720 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ec:	f7ff fa98 	bl	8000720 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e058      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <HAL_RCC_OscConfig+0x784>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f0      	beq.n	80011ec <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800120a:	e050      	b.n	80012ae <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e04f      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
 8001210:	40021000 	.word	0x40021000
 8001214:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001218:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d144      	bne.n	80012ae <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a23      	ldr	r2, [pc, #140]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 800122a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800122e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001230:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	4a20      	ldr	r2, [pc, #128]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8001236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800123a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800123c:	f7ff fa70 	bl	8000720 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001244:	f7ff fa6c 	bl	8000720 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e02c      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f0      	beq.n	8001244 <HAL_RCC_OscConfig+0x7b8>
 8001262:	e024      	b.n	80012ae <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2b0c      	cmp	r3, #12
 8001268:	d01f      	beq.n	80012aa <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126a:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8001270:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001276:	f7ff fa53 	bl	8000720 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127e:	f7ff fa4f 	bl	8000720 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e00f      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f0      	bne.n	800127e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	4905      	ldr	r1, [pc, #20]	; (80012b8 <HAL_RCC_OscConfig+0x82c>)
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_RCC_OscConfig+0x830>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	60cb      	str	r3, [r1, #12]
 80012a8:	e001      	b.n	80012ae <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3720      	adds	r7, #32
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000
 80012bc:	feeefffc 	.word	0xfeeefffc

080012c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d101      	bne.n	80012d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e11d      	b.n	8001514 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012d8:	4b90      	ldr	r3, [pc, #576]	; (800151c <HAL_RCC_ClockConfig+0x25c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 030f 	and.w	r3, r3, #15
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d910      	bls.n	8001308 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012e6:	4b8d      	ldr	r3, [pc, #564]	; (800151c <HAL_RCC_ClockConfig+0x25c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 020f 	bic.w	r2, r3, #15
 80012ee:	498b      	ldr	r1, [pc, #556]	; (800151c <HAL_RCC_ClockConfig+0x25c>)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f6:	4b89      	ldr	r3, [pc, #548]	; (800151c <HAL_RCC_ClockConfig+0x25c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d001      	beq.n	8001308 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e105      	b.n	8001514 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d010      	beq.n	8001336 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	4b81      	ldr	r3, [pc, #516]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001320:	429a      	cmp	r2, r3
 8001322:	d908      	bls.n	8001336 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001324:	4b7e      	ldr	r3, [pc, #504]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	497b      	ldr	r1, [pc, #492]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 8001332:	4313      	orrs	r3, r2
 8001334:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d079      	beq.n	8001436 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b03      	cmp	r3, #3
 8001348:	d11e      	bne.n	8001388 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800134a:	4b75      	ldr	r3, [pc, #468]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e0dc      	b.n	8001514 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800135a:	f000 f9d1 	bl	8001700 <RCC_GetSysClockFreqFromPLLSource>
 800135e:	4603      	mov	r3, r0
 8001360:	4a70      	ldr	r2, [pc, #448]	; (8001524 <HAL_RCC_ClockConfig+0x264>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d946      	bls.n	80013f4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001366:	4b6e      	ldr	r3, [pc, #440]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d140      	bne.n	80013f4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001372:	4b6b      	ldr	r3, [pc, #428]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800137a:	4a69      	ldr	r2, [pc, #420]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 800137c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001380:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	e035      	b.n	80013f4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d107      	bne.n	80013a0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001390:	4b63      	ldr	r3, [pc, #396]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d115      	bne.n	80013c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e0b9      	b.n	8001514 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d107      	bne.n	80013b8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013a8:	4b5d      	ldr	r3, [pc, #372]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d109      	bne.n	80013c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e0ad      	b.n	8001514 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013b8:	4b59      	ldr	r3, [pc, #356]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e0a5      	b.n	8001514 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80013c8:	f000 f8b4 	bl	8001534 <HAL_RCC_GetSysClockFreq>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4a55      	ldr	r2, [pc, #340]	; (8001524 <HAL_RCC_ClockConfig+0x264>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d90f      	bls.n	80013f4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80013d4:	4b52      	ldr	r3, [pc, #328]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d109      	bne.n	80013f4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80013e0:	4b4f      	ldr	r3, [pc, #316]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013e8:	4a4d      	ldr	r2, [pc, #308]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 80013ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ee:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80013f4:	4b4a      	ldr	r3, [pc, #296]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f023 0203 	bic.w	r2, r3, #3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	4947      	ldr	r1, [pc, #284]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 8001402:	4313      	orrs	r3, r2
 8001404:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001406:	f7ff f98b 	bl	8000720 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800140c:	e00a      	b.n	8001424 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800140e:	f7ff f987 	bl	8000720 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	f241 3288 	movw	r2, #5000	; 0x1388
 800141c:	4293      	cmp	r3, r2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e077      	b.n	8001514 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001424:	4b3e      	ldr	r3, [pc, #248]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 020c 	and.w	r2, r3, #12
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	429a      	cmp	r2, r3
 8001434:	d1eb      	bne.n	800140e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	2b80      	cmp	r3, #128	; 0x80
 800143a:	d105      	bne.n	8001448 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800143c:	4b38      	ldr	r3, [pc, #224]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	4a37      	ldr	r2, [pc, #220]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 8001442:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001446:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b00      	cmp	r3, #0
 8001452:	d010      	beq.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	4b31      	ldr	r3, [pc, #196]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001460:	429a      	cmp	r2, r3
 8001462:	d208      	bcs.n	8001476 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001464:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	492b      	ldr	r1, [pc, #172]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 8001472:	4313      	orrs	r3, r2
 8001474:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001476:	4b29      	ldr	r3, [pc, #164]	; (800151c <HAL_RCC_ClockConfig+0x25c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	d210      	bcs.n	80014a6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001484:	4b25      	ldr	r3, [pc, #148]	; (800151c <HAL_RCC_ClockConfig+0x25c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f023 020f 	bic.w	r2, r3, #15
 800148c:	4923      	ldr	r1, [pc, #140]	; (800151c <HAL_RCC_ClockConfig+0x25c>)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	4313      	orrs	r3, r2
 8001492:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001494:	4b21      	ldr	r3, [pc, #132]	; (800151c <HAL_RCC_ClockConfig+0x25c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 030f 	and.w	r3, r3, #15
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d001      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e036      	b.n	8001514 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d008      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	4918      	ldr	r1, [pc, #96]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d009      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014d0:	4b13      	ldr	r3, [pc, #76]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4910      	ldr	r1, [pc, #64]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 80014e0:	4313      	orrs	r3, r2
 80014e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014e4:	f000 f826 	bl	8001534 <HAL_RCC_GetSysClockFreq>
 80014e8:	4602      	mov	r2, r0
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <HAL_RCC_ClockConfig+0x260>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	f003 030f 	and.w	r3, r3, #15
 80014f4:	490c      	ldr	r1, [pc, #48]	; (8001528 <HAL_RCC_ClockConfig+0x268>)
 80014f6:	5ccb      	ldrb	r3, [r1, r3]
 80014f8:	f003 031f 	and.w	r3, r3, #31
 80014fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001500:	4a0a      	ldr	r2, [pc, #40]	; (800152c <HAL_RCC_ClockConfig+0x26c>)
 8001502:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001504:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_RCC_ClockConfig+0x270>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f8b9 	bl	8000680 <HAL_InitTick>
 800150e:	4603      	mov	r3, r0
 8001510:	73fb      	strb	r3, [r7, #15]

  return status;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40022000 	.word	0x40022000
 8001520:	40021000 	.word	0x40021000
 8001524:	04c4b400 	.word	0x04c4b400
 8001528:	0800193c 	.word	0x0800193c
 800152c:	20000000 	.word	0x20000000
 8001530:	20000004 	.word	0x20000004

08001534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001534:	b480      	push	{r7}
 8001536:	b089      	sub	sp, #36	; 0x24
 8001538:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001542:	4b3e      	ldr	r3, [pc, #248]	; (800163c <HAL_RCC_GetSysClockFreq+0x108>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800154c:	4b3b      	ldr	r3, [pc, #236]	; (800163c <HAL_RCC_GetSysClockFreq+0x108>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <HAL_RCC_GetSysClockFreq+0x34>
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	2b0c      	cmp	r3, #12
 8001560:	d121      	bne.n	80015a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d11e      	bne.n	80015a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001568:	4b34      	ldr	r3, [pc, #208]	; (800163c <HAL_RCC_GetSysClockFreq+0x108>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	2b00      	cmp	r3, #0
 8001572:	d107      	bne.n	8001584 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001574:	4b31      	ldr	r3, [pc, #196]	; (800163c <HAL_RCC_GetSysClockFreq+0x108>)
 8001576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800157a:	0a1b      	lsrs	r3, r3, #8
 800157c:	f003 030f 	and.w	r3, r3, #15
 8001580:	61fb      	str	r3, [r7, #28]
 8001582:	e005      	b.n	8001590 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001584:	4b2d      	ldr	r3, [pc, #180]	; (800163c <HAL_RCC_GetSysClockFreq+0x108>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	091b      	lsrs	r3, r3, #4
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001590:	4a2b      	ldr	r2, [pc, #172]	; (8001640 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001598:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d10d      	bne.n	80015bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015a4:	e00a      	b.n	80015bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d102      	bne.n	80015b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80015ac:	4b25      	ldr	r3, [pc, #148]	; (8001644 <HAL_RCC_GetSysClockFreq+0x110>)
 80015ae:	61bb      	str	r3, [r7, #24]
 80015b0:	e004      	b.n	80015bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	2b08      	cmp	r3, #8
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015b8:	4b23      	ldr	r3, [pc, #140]	; (8001648 <HAL_RCC_GetSysClockFreq+0x114>)
 80015ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	2b0c      	cmp	r3, #12
 80015c0:	d134      	bne.n	800162c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <HAL_RCC_GetSysClockFreq+0x108>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d003      	beq.n	80015da <HAL_RCC_GetSysClockFreq+0xa6>
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d003      	beq.n	80015e0 <HAL_RCC_GetSysClockFreq+0xac>
 80015d8:	e005      	b.n	80015e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80015da:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <HAL_RCC_GetSysClockFreq+0x110>)
 80015dc:	617b      	str	r3, [r7, #20]
      break;
 80015de:	e005      	b.n	80015ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80015e0:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_RCC_GetSysClockFreq+0x114>)
 80015e2:	617b      	str	r3, [r7, #20]
      break;
 80015e4:	e002      	b.n	80015ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	617b      	str	r3, [r7, #20]
      break;
 80015ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015ec:	4b13      	ldr	r3, [pc, #76]	; (800163c <HAL_RCC_GetSysClockFreq+0x108>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	091b      	lsrs	r3, r3, #4
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	3301      	adds	r3, #1
 80015f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <HAL_RCC_GetSysClockFreq+0x108>)
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	0a1b      	lsrs	r3, r3, #8
 8001600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	fb03 f202 	mul.w	r2, r3, r2
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001610:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <HAL_RCC_GetSysClockFreq+0x108>)
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	0e5b      	lsrs	r3, r3, #25
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	3301      	adds	r3, #1
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800162c:	69bb      	ldr	r3, [r7, #24]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000
 8001640:	0800194c 	.word	0x0800194c
 8001644:	00f42400 	.word	0x00f42400
 8001648:	007a1200 	.word	0x007a1200

0800164c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001658:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800165a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001664:	f7ff f94e 	bl	8000904 <HAL_PWREx_GetVoltageRange>
 8001668:	6178      	str	r0, [r7, #20]
 800166a:	e014      	b.n	8001696 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800166c:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800166e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001670:	4a21      	ldr	r2, [pc, #132]	; (80016f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001676:	6593      	str	r3, [r2, #88]	; 0x58
 8001678:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800167a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001684:	f7ff f93e 	bl	8000904 <HAL_PWREx_GetVoltageRange>
 8001688:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	4a1a      	ldr	r2, [pc, #104]	; (80016f8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001694:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800169c:	d10b      	bne.n	80016b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b80      	cmp	r3, #128	; 0x80
 80016a2:	d913      	bls.n	80016cc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2ba0      	cmp	r3, #160	; 0xa0
 80016a8:	d902      	bls.n	80016b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80016aa:	2302      	movs	r3, #2
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	e00d      	b.n	80016cc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80016b0:	2301      	movs	r3, #1
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	e00a      	b.n	80016cc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b7f      	cmp	r3, #127	; 0x7f
 80016ba:	d902      	bls.n	80016c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80016bc:	2302      	movs	r3, #2
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	e004      	b.n	80016cc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b70      	cmp	r3, #112	; 0x70
 80016c6:	d101      	bne.n	80016cc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80016c8:	2301      	movs	r3, #1
 80016ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f023 020f 	bic.w	r2, r3, #15
 80016d4:	4909      	ldr	r1, [pc, #36]	; (80016fc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80016dc:	4b07      	ldr	r3, [pc, #28]	; (80016fc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 030f 	and.w	r3, r3, #15
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d001      	beq.n	80016ee <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40022000 	.word	0x40022000

08001700 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001706:	4b2d      	ldr	r3, [pc, #180]	; (80017bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2b03      	cmp	r3, #3
 8001714:	d00b      	beq.n	800172e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d825      	bhi.n	8001768 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d008      	beq.n	8001734 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d11f      	bne.n	8001768 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001728:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800172a:	613b      	str	r3, [r7, #16]
    break;
 800172c:	e01f      	b.n	800176e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800172e:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001730:	613b      	str	r3, [r7, #16]
    break;
 8001732:	e01c      	b.n	800176e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001734:	4b21      	ldr	r3, [pc, #132]	; (80017bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	2b00      	cmp	r3, #0
 800173e:	d107      	bne.n	8001750 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001740:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	f003 030f 	and.w	r3, r3, #15
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	e005      	b.n	800175c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	091b      	lsrs	r3, r3, #4
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800175c:	4a1a      	ldr	r2, [pc, #104]	; (80017c8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001764:	613b      	str	r3, [r7, #16]
    break;
 8001766:	e002      	b.n	800176e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]
    break;
 800176c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	f003 030f 	and.w	r3, r3, #15
 8001778:	3301      	adds	r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	fb03 f202 	mul.w	r2, r3, r2
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001792:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	0e5b      	lsrs	r3, r3, #25
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	3301      	adds	r3, #1
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ac:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80017ae:	683b      	ldr	r3, [r7, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	371c      	adds	r7, #28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	40021000 	.word	0x40021000
 80017c0:	00f42400 	.word	0x00f42400
 80017c4:	007a1200 	.word	0x007a1200
 80017c8:	0800194c 	.word	0x0800194c

080017cc <arm_max_f32>:
 80017cc:	f101 3cff 	add.w	ip, r1, #4294967295
 80017d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017d2:	4607      	mov	r7, r0
 80017d4:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 80017d8:	ecf7 7a01 	vldmia	r7!, {s15}
 80017dc:	d060      	beq.n	80018a0 <arm_max_f32+0xd4>
 80017de:	2400      	movs	r4, #0
 80017e0:	3014      	adds	r0, #20
 80017e2:	4625      	mov	r5, r4
 80017e4:	ea4f 068e 	mov.w	r6, lr, lsl #2
 80017e8:	ed10 7a04 	vldr	s14, [r0, #-16]
 80017ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f4:	bf48      	it	mi
 80017f6:	eef0 7a47 	vmovmi.f32	s15, s14
 80017fa:	ed10 7a03 	vldr	s14, [r0, #-12]
 80017fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001802:	bf48      	it	mi
 8001804:	1c65      	addmi	r5, r4, #1
 8001806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180a:	bf48      	it	mi
 800180c:	eef0 7a47 	vmovmi.f32	s15, s14
 8001810:	ed10 7a02 	vldr	s14, [r0, #-8]
 8001814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001818:	bf48      	it	mi
 800181a:	1ca5      	addmi	r5, r4, #2
 800181c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001820:	bf48      	it	mi
 8001822:	eef0 7a47 	vmovmi.f32	s15, s14
 8001826:	ed10 7a01 	vldr	s14, [r0, #-4]
 800182a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800182e:	bf48      	it	mi
 8001830:	1ce5      	addmi	r5, r4, #3
 8001832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001836:	f104 0404 	add.w	r4, r4, #4
 800183a:	bf44      	itt	mi
 800183c:	eef0 7a47 	vmovmi.f32	s15, s14
 8001840:	4625      	movmi	r5, r4
 8001842:	42a6      	cmp	r6, r4
 8001844:	f100 0010 	add.w	r0, r0, #16
 8001848:	d1ce      	bne.n	80017e8 <arm_max_f32+0x1c>
 800184a:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800184e:	f01c 0003 	ands.w	r0, ip, #3
 8001852:	d021      	beq.n	8001898 <arm_max_f32+0xcc>
 8001854:	ed97 7a00 	vldr	s14, [r7]
 8001858:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800185c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001860:	bfc4      	itt	gt
 8001862:	eef0 7a47 	vmovgt.f32	s15, s14
 8001866:	1a0d      	subgt	r5, r1, r0
 8001868:	3801      	subs	r0, #1
 800186a:	d015      	beq.n	8001898 <arm_max_f32+0xcc>
 800186c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001870:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001878:	bf44      	itt	mi
 800187a:	eef0 7a47 	vmovmi.f32	s15, s14
 800187e:	1a0d      	submi	r5, r1, r0
 8001880:	2801      	cmp	r0, #1
 8001882:	d009      	beq.n	8001898 <arm_max_f32+0xcc>
 8001884:	ed97 7a02 	vldr	s14, [r7, #8]
 8001888:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800188c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001890:	bfc4      	itt	gt
 8001892:	eef0 7a47 	vmovgt.f32	s15, s14
 8001896:	4665      	movgt	r5, ip
 8001898:	edc2 7a00 	vstr	s15, [r2]
 800189c:	601d      	str	r5, [r3, #0]
 800189e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a0:	4675      	mov	r5, lr
 80018a2:	e7d4      	b.n	800184e <arm_max_f32+0x82>

080018a4 <memset>:
 80018a4:	4402      	add	r2, r0
 80018a6:	4603      	mov	r3, r0
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d100      	bne.n	80018ae <memset+0xa>
 80018ac:	4770      	bx	lr
 80018ae:	f803 1b01 	strb.w	r1, [r3], #1
 80018b2:	e7f9      	b.n	80018a8 <memset+0x4>

080018b4 <__libc_init_array>:
 80018b4:	b570      	push	{r4, r5, r6, lr}
 80018b6:	4d0d      	ldr	r5, [pc, #52]	; (80018ec <__libc_init_array+0x38>)
 80018b8:	4c0d      	ldr	r4, [pc, #52]	; (80018f0 <__libc_init_array+0x3c>)
 80018ba:	1b64      	subs	r4, r4, r5
 80018bc:	10a4      	asrs	r4, r4, #2
 80018be:	2600      	movs	r6, #0
 80018c0:	42a6      	cmp	r6, r4
 80018c2:	d109      	bne.n	80018d8 <__libc_init_array+0x24>
 80018c4:	4d0b      	ldr	r5, [pc, #44]	; (80018f4 <__libc_init_array+0x40>)
 80018c6:	4c0c      	ldr	r4, [pc, #48]	; (80018f8 <__libc_init_array+0x44>)
 80018c8:	f000 f818 	bl	80018fc <_init>
 80018cc:	1b64      	subs	r4, r4, r5
 80018ce:	10a4      	asrs	r4, r4, #2
 80018d0:	2600      	movs	r6, #0
 80018d2:	42a6      	cmp	r6, r4
 80018d4:	d105      	bne.n	80018e2 <__libc_init_array+0x2e>
 80018d6:	bd70      	pop	{r4, r5, r6, pc}
 80018d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80018dc:	4798      	blx	r3
 80018de:	3601      	adds	r6, #1
 80018e0:	e7ee      	b.n	80018c0 <__libc_init_array+0xc>
 80018e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80018e6:	4798      	blx	r3
 80018e8:	3601      	adds	r6, #1
 80018ea:	e7f2      	b.n	80018d2 <__libc_init_array+0x1e>
 80018ec:	0800197c 	.word	0x0800197c
 80018f0:	0800197c 	.word	0x0800197c
 80018f4:	0800197c 	.word	0x0800197c
 80018f8:	08001980 	.word	0x08001980

080018fc <_init>:
 80018fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018fe:	bf00      	nop
 8001900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001902:	bc08      	pop	{r3}
 8001904:	469e      	mov	lr, r3
 8001906:	4770      	bx	lr

08001908 <_fini>:
 8001908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800190a:	bf00      	nop
 800190c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800190e:	bc08      	pop	{r3}
 8001910:	469e      	mov	lr, r3
 8001912:	4770      	bx	lr
